{"version":3,"sources":["components/PoolInfo.js","lib/transactions.js","lib/constants.js","components/PoXRevoke.js","components/Amount.js","components/PoolJoin.js","lib/pools.js","components/PoolJoinSimple.js","lib/account.js","lib/pools-utils.js","../node_modules/@stacks/connect-ui/dist/esm lazy /^/.//.*/.entry/.js$/ include: //.entry/.js$/ exclude: //.system/.entry/.js$/ groupOptions: {} namespace object","lib/auth.js","pages/Landing.js","pages/Overview.js","components/Auth.js","lib/hooks.js","components/Pool.js","components/PoolList.js","pages/PoolRegistry.js","pages/PoolDetails.js","components/StxProfile.js","components/Profile.js","pages/MyProfile.js","components/PoolForm.js","pages/MyProfileRegister.js","pages/MyProfileEdit.js","pages/PoolDetailsSimple.js","pages/MyProfileHodl.js","App.js","index.js"],"names":["PoolInfo","u","pool","contractId","getPoolContractId","data","url","href","startsWith","usernameCVToName","name","verified","type","ClarityType","BoolTrue","src","alt","width","cvToString","delegatee","List","list","map","lp","value","toString","join","OptionalSome","address","poxCVToBtcAddress","TxStatus","txId","resultPrefix","useState","loading","processingResult","setProcessingResult","spinner","useRef","useEffect","sub","console","log","current","classList","remove","update","a","connectWebSocketClient","STACKS_API_WS_URL","client","subscribeTxUpdates","subscribe","event","tx_status","transactionsApi","getTransactionById","tx","result","tx_result","undefined","add","unsubscribe","normalizedTxId","repr","ref","role","className","CONTRACT_ADDRESS","POOL_REGISTRY_CONTRACT_NAME","GENESIS_CONTRACT_ADDRESS","BNS_CONTRACT_NAME","authOrigin","STACK_API_URL","STACKS_API_ACCOUNTS_URL","NETWORK","StacksMainnet","basePath","config","Configuration","accountsApi","AccountsApi","smartContractsApi","SmartContractsApi","TransactionsApi","InfoApi","PoXRevoke","userSession","setStatus","setTxId","setLoading","doContractCall","useStacksJsConnect","revokeAction","functionArgs","contractAddress","contractName","functionName","postConditionMode","PostConditionMode","Deny","postConditions","network","onFinish","onClick","Amount","ustx","isNaN","toLocaleString","style","minimumFractionDigits","maximumFractionDigits","getPayoutAddressCV","payout","poxAddrCVFromBitcoin","poxAddrCV","tupleCV","hashbytes","bufferCV","Buffer","from","version","PoolJoin","ownerStxAddress","amount","duration","payoutAddress","lockingPeriod","status","fetchAccount","catch","e","then","acc","getAccountBalance","principal","balance","stxBalance","parseInt","stx","locked","isSimple","contract","split","parts","delegateeCV","length","standardPrincipalCV","contractPrincipalCV","rewardBtcAddressCV","noneCV","getPayout","userPayoutAddress","stxAddress","c32","getPayoutAddress","poolData","joinAction","amountCV","uintCV","trim","durationCV","someCV","payoutAddressCV","lockingPeriodCV","finished","step","min","placeholder","onKeyUp","key","focus","onBlur","disabled","readOnly","defaultValue","fetchPool","poolId","callReadOnlyFunction","senderAddress","receipt","OptionalNone","fetchPools","verify","offset","idsCV","Array","keys","i","listCV","Promise","all","cv","index","poolCV","verifyUrl","trueCV","falseCV","verifiedPools","reduce","push","nameToUsernameCV","fullQualifiedName","namespace","bufferCVFromString","usernameCV","buffer","whiteListedUrls","username","whiteListedUsername","fetch","json","manifest","author","whiteListedContracts","findTraitIndex","ctrAddress","ctrName","verifyContractTrait","registerFunctions","updateFunctions","contractCV","ext","traitName","path","isImplemented","is_implemented","PoolJoinSimple","stackingStatus","setStackingStatus","delegationState","setDelegationState","suggestedAmount","setSuggestedAmount","progress1","setProgress1","progress2","setProgress2","progress3","setProgress3","progress4","setProgress4","Math","StackingClient","getStatus","s","getContractDataMapEntry","mapName","cvToHex","stacker","mapEntry","hexToCV","state","progress","class","aria-valuenow","aria-valuemin","aria-valuemax","stacked","details","amount_microstx","first_reward_cycle","lock_period","getStacksAccount","appPrivateKey","privateKey","createStacksPrivateKey","publicKey","getPublicKey","addressFromPublicKeys","AddressVersion","MainnetSingleSig","AddressHashMode","SerializeP2PKH","addressAsString","response","reject","getUsername","readOnlyFunctionArgs","sender","arguments","nameResult","okay","resultCV","ResponseOk","code","decodeBtcAddress","btcAddress","hashMode","fromBech32","SerializeP2WSH","SerializeP2WPKH","fromBase58Check","SerializeP2SH","Error","getAddressHashMode","hash","decodeStxAddress","toBase58Check","mainnet","addressHashModeToBtcVersion","valueOf","webpackAsyncContext","req","__webpack_require__","o","resolve","ids","id","Object","module","exports","appConfig","AppConfig","userSessionState","atom","UserSession","userDataState","authResponseState","useConnect","useAtom","setUserData","useUpdateAtom","setAuthResponse","payload","authResponse","loadUserData","userData","authOptions","redirectTo","manifestPath","appDetails","icon","handleOpenAuth","showConnect","handleSignOut","useCallback","signUserOut","Landing","props","target","rel","Overview","Auth","isUserSignedIn","useStxAddresses","setOwnerStxAddress","appStxAddress","setAppStxAddress","setAppPrivateKey","getUserData","addressToString","profile","hasJoined","userInfo","delegation","delegatedTo","isStacking","stacking","poxAddr","Pool","navigate","useNavigate","canJoin","PoolList","search","verifyUsername","pools","setPools","filteredPools","filter","findIndex","item","fees","indexOf","addr","PoolRegistry","payoutRef","lockingPeriodRef","searchRef","setPayout","setLockingPeriod","setSearch","onChange","PoolDetails","location","setPoolData","p","fn","StxProfile","updateStatus","showAddress","account","profileState","setProfileState","onRefreshBalance","toFixed","Profile","stxAddresses","nameCV","setNameCV","person","Person","avatarUrl","replace","setTimeout","isPoolOwned","MyProfile","ERR_NAME","ERR_URL","ERR_REWARD_ADDRESS_1","ERR_INVALID_REWARD_ADDRESSES","ERR_INVALID_CONTRACT_ID","ERR_LOCKING_PERIOD_1","ERR_INVALID_LOCKING_PERIODS","ERR_INVALID_STX_ADDRESS","PoolForm","formButtonLabel","register","title","priceInfo","delegateeAddress","rewardBtcAddresses","minimum","lockingPeriods","dateOfPayout","poolStatus","setUsername","setPool","price","setPrice","btcAddressFromOwnerStxAddress","formAction","errors","validateForm","poolCtrAddress","poolCtrName","traitIndex","priceBN","BN","checkPrice","checkUrl","stxPostCondition","makeStandardSTXPostCondition","FungibleConditionCode","Equal","delegateeParts","poxAddressesCV","urlCV","stringAsciiCV","minimumUstxCV","lockingPeriodsCV","payoutCV","dateOfPayoutCV","feesCV","statusCV","poxAddressCV","requestedName","priceResult","priceUstx","innerHTML","setCustomValidity","addrList","ctrAddr","lockingPeriodList","period","alignItems","required","maxLength","MyProfileRegister","MyProfileEdit","PoolDetailsSimple","preview","setPreview","transferToOwnerAddress","fee","makeSTXTokenTransfer","recipient","senderKey","broadcastTransaction","App","isSignInPending","handlePendingSignIn","Content","NavLink","getProps","isCurrent","AppBody","to","children","coreApiUrl","authenticated","decentralizedID","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.52104c94.chunk.js","sourcesContent":["import { ClarityType, cvToString } from '@stacks/transactions';\nimport { getPoolContractId, usernameCVToName } from '../lib/pools';\nimport { poxCVToBtcAddress } from '../lib/pools-utils';\n\nfunction normalizedUrl(u) {\n  if (u.startsWith('https://') || u.startsWith('http://')) {\n    return u;\n  } else {\n    return `https://${u}`;\n  }\n}\nexport default function PoolInfo({ pool }) {\n  const contractId = getPoolContractId(pool);\n\n  return (\n    <>\n      <h5>\n        {pool.data.url.data ? (\n          <a href={normalizedUrl(pool.data.url.data)}>{usernameCVToName(pool.data.name)}</a>\n        ) : (\n          <>{usernameCVToName(pool.data.name)}</>\n        )}\n        {pool.data.verified && pool.data.verified.type === ClarityType.BoolTrue && (\n          <>\n            {' '}\n            <a href={`${pool.data.url.data}/manifest.json`}>\n              <img src=\"/verified.svg\" alt=\"verified\" width=\"16\" />\n            </a>\n          </>\n        )}\n      </h5>\n      <p>\n        {cvToString(pool.data.delegatee)}\n        <br />\n        {pool.data['locking-period'].type === ClarityType.List\n          ? `Locking for ${pool.data['locking-period'].list\n              .map(lp => lp.value.toString(10))\n              .join(', ')} cycles.`\n          : 'Variable locking period'}\n        <br />\n        {pool.data['minimum-ustx'].type === ClarityType.OptionalSome\n          ? `Minimum amount required to join: ${\n              pool.data['minimum-ustx'].value.value / 1000000n\n            } STX`\n          : 'No minimum STX required.'}\n        <br />\n        Payout in {pool.data['payout'].data}.\n        <br />\n        {pool.data['date-of-payout'].data ? (\n          <>When payout? {pool.data['date-of-payout'].data}.</>\n        ) : (\n          <>No information about payout date available.</>\n        )}\n        <br />\n        {pool.data['fees'].data\n          ? `Fees: ${pool.data['fees'].data}`\n          : 'No information about fees available.'}\n        <br />\n        Reward addresses:\n        <br />\n        {pool.data['pox-address'].list.map(address => {\n          return (\n            <>\n              {poxCVToBtcAddress(address)}\n              <br />\n            </>\n          );\n        })}\n        Using contract:\n        <br />\n        {contractId}\n        <br />\n      </p>\n    </>\n  );\n}\n","import { serializeCV, hexToCV as stacksHexToCV } from '@stacks/transactions';\nimport { connectWebSocketClient } from '@stacks/blockchain-api-client';\nimport React, { useState, useEffect, useRef } from 'react';\nimport { STACKS_API_WS_URL, transactionsApi } from './constants';\n\nexport function resultToStatus(result) {\n  if (result && !result.error && result.startsWith('\"') && result.length === 66) {\n    const txId = result.substr(1, 64);\n    return txIdToStatus(txId);\n  } else if (result && result.error) {\n    return JSON.stringify(result);\n  } else {\n    return result.toString();\n  }\n}\n\nexport function txIdToStatus(txId) {\n  return (\n    <>\n      Check transaction status: <a href={txUrl(txId)}>{txId}</a>\n    </>\n  );\n}\n\nexport function cvToHex(value) {\n  return `0x${serializeCV(value).toString('hex')}`;\n}\n\nexport function hexToCV(hexString) {\n  return stacksHexToCV(hexString);\n}\n\nexport function txUrl(txId) {\n  return `https://explorer.stacks.co/txid/0x${txId}?chain=mainnet`;\n}\n\nexport function TxStatus({ txId, resultPrefix }) {\n  const [processingResult, setProcessingResult] = useState({ loading: false });\n  const spinner = useRef();\n\n  useEffect(() => {\n    if (!txId) {\n      return;\n    }\n    console.log(txId);\n    spinner.current.classList.remove('d-none');\n    setProcessingResult({ loading: true });\n\n    let sub;\n    const subscribe = async (txId, update) => {\n      try {\n        const client = await connectWebSocketClient(STACKS_API_WS_URL);\n        sub = await client.subscribeTxUpdates(txId, update);\n        console.log({ client, sub });\n      } catch (e) {\n        console.log(e);\n      }\n    };\n\n    subscribe(txId, async event => {\n      console.log(event);\n      let result;\n      if (event.tx_status === 'pending') {\n        return;\n      } else if (event.tx_status === 'success') {\n        const tx = await transactionsApi.getTransactionById({ txId });\n        console.log(tx);\n        result = tx.tx_result;\n      } else if (event.tx_status.startsWith('abort')) {\n        result = undefined;\n      }\n      spinner.current.classList.add('d-none');\n      setProcessingResult({ loading: false, result });\n      await sub.unsubscribe();\n    });\n  }, [txId]);\n\n  if (!txId) {\n    return null;\n  }\n\n  const normalizedTxId = txId.startsWith('0x') ? txId : `0x${txId}`;\n  return (\n    <>\n      {processingResult.loading && (\n        <>\n          Checking transaction status:{' '}\n          <a href={`https://explorer.stacks.co/txid/${normalizedTxId}?chain=mainnet`}>\n            {normalizedTxId}\n          </a>\n        </>\n      )}\n      {!processingResult.loading && processingResult.result && (\n        <>\n          {resultPrefix}\n          {processingResult.result.repr}\n        </>\n      )}{' '}\n      <div\n        ref={spinner}\n        role=\"status\"\n        className=\"d-none spinner-border spinner-border-sm text-info align-text-top mr-2\"\n      />\n    </>\n  );\n}\n","import {\n  TransactionsApi,\n  SmartContractsApi,\n  AccountsApi,\n  Configuration,\n  InfoApi,\n} from '@stacks/blockchain-api-client';\nimport { StacksMainnet } from '@stacks/network';\n\nexport const CONTRACT_ADDRESS = 'SP1K1A1PMGW2ZJCNF46NWZWHG8TS1D23EGH1KNK60';\nexport const POOL_REGISTRY_CONTRACT_NAME = 'pool-registry-v1';\nexport const GENESIS_CONTRACT_ADDRESS = 'SP000000000000000000002Q6VF78';\nexport const BNS_CONTRACT_NAME = 'bns';\n\nexport const authOrigin = 'https://app.blockstack.org';\n\nexport const STACK_API_URL = 'https://stacks-node-api.mainnet.stacks.co';\nexport const STACKS_API_WS_URL = 'ws://stacks-node-api.mainnet.stacks.co/';\nexport const STACKS_API_ACCOUNTS_URL = `${STACK_API_URL}/v2/accounts`;\n\nexport const NETWORK = new StacksMainnet({\n  url:STACK_API_URL\n});\n\nconst basePath = STACK_API_URL;\nconst config = new Configuration({ basePath });\nexport const accountsApi = new AccountsApi(config);\nexport const smartContractsApi = new SmartContractsApi(config);\nexport const transactionsApi = new TransactionsApi(config);\nexport const infoApi = new InfoApi(config);\n","import { useState } from 'react';\nimport { useConnect as useStacksJsConnect } from '@stacks/connect-react';\nimport { NETWORK } from '../lib/constants';\nimport { PostConditionMode } from '@stacks/transactions';\n\n\nexport function PoXRevoke({ userSession, setStatus, setTxId }) {\n  const [loading, setLoading] = useState();\n  const { doContractCall } = useStacksJsConnect();\n\n  const revokeAction = async () => {\n    setLoading(true);\n    try {\n      setStatus(`Sending transaction`);\n      const functionArgs = [];\n      await doContractCall({\n        contractAddress: \"SP000000000000000000002Q6VF78\",\n        contractName: \"pox\",\n        functionName: 'revoke-delegate-stx',\n        functionArgs,\n        postConditionMode: PostConditionMode.Deny,\n        postConditions: [],\n        userSession,\n        network: NETWORK,\n        onFinish: data => {\n          console.log(data);\n          setStatus(undefined);\n          setTxId(data.txId);\n          setLoading(false);\n        },\n      });\n    } catch (e) {\n      console.log(e);\n      setStatus(e.toString());\n      setLoading(false);\n    }\n  };\n\n  return (\n    <button className=\"btn btn-outline-secondary\" type=\"button\" onClick={revokeAction}>\n      <div\n        role=\"status\"\n        className={`${\n          loading ? '' : 'd-none'\n        } spinner-border spinner-border-sm text-info align-text-top mr-2`}\n      />\n      Cancel pool membership\n    </button>\n  );\n}\n","export function Amount({ ustx, className }) {\n  if (isNaN(ustx)) {\n    return ustx;\n  }\n  return (\n    <span className={className}>\n      {(ustx / 1000000).toLocaleString(undefined, {\n        style: 'decimal',\n        minimumFractionDigits: 0,\n        maximumFractionDigits: 0,\n      })}\n      Ӿ\n    </span>\n  );\n}\n","import React, { useRef, useState, useEffect } from 'react';\n\nimport { accountsApi, NETWORK } from '../lib/constants';\nimport { TxStatus } from '../lib/transactions';\nimport { fetchAccount } from '../lib/account';\nimport { useConnect as useStacksJsConnect } from '@stacks/connect-react';\nimport {\n  bufferCV,\n  ClarityType,\n  contractPrincipalCV,\n  cvToString,\n  noneCV,\n  PostConditionMode,\n  someCV,\n  standardPrincipalCV,\n  tupleCV,\n  uintCV,\n} from '@stacks/transactions';\nimport * as c32 from 'c32check';\nimport { poxAddrCV, poxAddrCVFromBitcoin } from '../lib/pools-utils';\nimport PoolInfo from './PoolInfo';\nimport { getPoolContractId } from '../lib/pools';\n\nfunction getPayout(pool) {\n  switch (pool.data.payout.data) {\n    case 'BTC':\n      return 'BTC';\n    case 'STX':\n      return 'STX';\n    default:\n      return undefined;\n  }\n}\n\nfunction getPayoutAddress(payout, stxAddress) {\n  console.log({ payout, stxAddress });\n  if (!stxAddress) return undefined;\n  switch (payout) {\n    case 'BTC':\n      return c32.c32ToB58(stxAddress);\n    case 'STX':\n      return stxAddress;\n    default:\n      return stxAddress;\n  }\n}\n\nfunction getPayoutAddressCV(payout, address) {\n  switch (payout) {\n    case 'BTC':\n      return poxAddrCVFromBitcoin(address);\n    case 'STX':\n      return poxAddrCV(address);\n    default:\n      return tupleCV({\n        hashbytes: bufferCV(Buffer.from([0])),\n        version: bufferCV(Buffer.from([0])),\n      });\n  }\n}\n\nexport function PoolJoin({ pool, ownerStxAddress, userSession }) {\n  console.log(pool);\n  console.log({ ownerStxAddress, userSession });\n  const { doContractCall } = useStacksJsConnect();\n  const amount = useRef();\n  const duration = useRef();\n  const payoutAddress = useRef();\n  const lockingPeriod = useRef();\n\n  const spinner = useRef();\n  const [status, setStatus] = useState();\n  const [txId, setTxId] = useState();\n  const [stxBalance, setStxBalance] = useState();\n\n  useEffect(() => {\n    if (ownerStxAddress) {\n      fetchAccount(ownerStxAddress)\n        .catch(e => {\n          setStatus('Failed to access your account', e);\n          console.log(e);\n        })\n        .then(async acc => {\n          setStatus(undefined);\n          console.log({ acc });\n        });\n      accountsApi.getAccountBalance({ principal: ownerStxAddress }).then(balance => {\n        const stxBalance = (parseInt(balance.stx.balance) - parseInt(balance.stx.locked)) / 1000000;\n        if (amount.current) {\n          amount.current.value = stxBalance;\n        }\n      });\n    }\n  }, [ownerStxAddress]);\n\n  const isSimple = pool.data.contract.type === ClarityType.OptionalSome;\n  const isExt = pool.data['extended-contract'].type === ClarityType.OptionalSome;\n  const isExt2 = pool.data['extended2-contract'].type === ClarityType.OptionalSome;\n  const contractId = getPoolContractId(pool);\n  const [contractAddress, contractName] = contractId.split('.');\n  const delegatee = cvToString(pool.data.delegatee);\n  const parts = delegatee.split('.');\n  const delegateeCV =\n    parts.length < 2 ? standardPrincipalCV(parts[0]) : contractPrincipalCV(parts[0], parts[1]);\n  const useFirstPoolAddress = false;\n  const rewardBtcAddressCV = useFirstPoolAddress ? someCV(pool.data['pox-address'][0]) : noneCV();\n  const payout = getPayout(pool);\n  const userPayoutAddress = getPayoutAddress(payout, ownerStxAddress);\n\n  console.log({ poolData: pool.data });\n\n  const joinAction = async () => {\n    spinner.current.classList.remove('d-none');\n\n    const amountCV = uintCV(amount.current.value.trim() * 1000000); // convert to uSTX\n    const durationCV = duration.current.value.trim()\n      ? someCV(uintCV(duration.current.value.trim()))\n      : noneCV();\n    const payoutAddressCV = getPayoutAddressCV(payout, payoutAddress.current.value.trim());\n    const lockingPeriodCV = uintCV(lockingPeriod.current.value.trim());\n    try {\n      setStatus(`Sending transaction`);\n      const functionArgs = isSimple\n        ? [amountCV, delegateeCV, durationCV, rewardBtcAddressCV]\n        : [amountCV, delegateeCV, durationCV, rewardBtcAddressCV, payoutAddressCV, lockingPeriodCV];\n      console.log({ functionArgs });\n      await doContractCall({\n        contractAddress,\n        contractName,\n        functionName: 'delegate-stx',\n        functionArgs,\n        postConditionMode: PostConditionMode.Deny,\n        postConditions: [],\n        userSession,\n        network: NETWORK,\n        finished: data => {\n          console.log(data);\n          setStatus(undefined);\n          setTxId(data.txId);\n          spinner.current.classList.add('d-none');\n        },\n      });\n    } catch (e) {\n      console.log(e);\n      setStatus(e.toString());\n      spinner.current.classList.add('d-none');\n    }\n  };\n\n  return (\n    <div>\n      <h5>Join the pool</h5>\n      <PoolInfo pool={pool} />\n      <div className=\"NoteField\">\n        Choose an amount, how much you would like to \"delegately\" stack through this pool (can be\n        higher than your balance to compound future rewards if stacking indefinitely).\n        <input\n          type=\"number\"\n          step=\"any\"\n          min=\"0\"\n          ref={amount}\n          className=\"form-control\"\n          placeholder=\"Amount in STX\"\n          onKeyUp={e => {\n            if (e.key === 'Enter') duration.current.focus();\n          }}\n          onBlur={e => {\n            setStatus(undefined);\n          }}\n        />\n        <br />\n        Duration of your pool membership (until which BTC block)\n        <input\n          type=\"text\"\n          ref={duration}\n          className=\"form-control\"\n          placeholder=\"Leave empty for indefinite duration\"\n          onKeyUp={e => {\n            if (e.key === 'Enter') lockingPeriod.current.focus();\n          }}\n          onBlur={e => {\n            setStatus(undefined);\n          }}\n        />\n        <br />\n        Locking Period (how long do you want to swim this time?)\n        <input\n          type=\"text\"\n          ref={lockingPeriod}\n          className=\"form-control\"\n          placeholder=\"Number of cycles\"\n          disabled={isSimple}\n          readOnly={pool && pool.data['locking-period'].type === ClarityType.List}\n          defaultValue={\n            pool && pool.data['locking-period'].type === ClarityType.List\n              ? pool.data['locking-period'].list.map(lp => lp.value.toString(10)).join(' - ')\n              : ''\n          }\n          onKeyUp={e => {\n            if (e.key === 'Enter') payoutAddress.current.focus();\n          }}\n          onBlur={e => {\n            setStatus(undefined);\n          }}\n        />\n        <br />\n        Payout address (how would you like to get your rewards)\n        <input\n          type=\"text\"\n          ref={payoutAddress}\n          className=\"form-control\"\n          defaultValue={userPayoutAddress}\n          disabled={isSimple}\n          onKeyUp={e => {\n            if (e.key === 'Enter') joinAction();\n          }}\n          onBlur={e => {\n            setStatus(undefined);\n          }}\n        />\n        <br />\n        <div className=\"input-group-append\">\n          <button className=\"btn btn-outline-secondary\" type=\"button\" onClick={joinAction}>\n            <div\n              ref={spinner}\n              role=\"status\"\n              className=\"d-none spinner-border spinner-border-sm text-info align-text-top mr-2\"\n            />\n            Delegate\n          </button>\n        </div>\n      </div>\n      <div>\n        <TxStatus txId={txId} resultPrefix=\"You joined the pool \" />\n      </div>\n      {status && (\n        <>\n          <div>{status}</div>\n        </>\n      )}\n    </div>\n  );\n}\n","import {\n  bufferCVFromString,\n  callReadOnlyFunction,\n  ClarityType,\n  cvToString,\n  falseCV,\n  listCV,\n  trueCV,\n  tupleCV,\n  uintCV,\n} from '@stacks/transactions';\nimport {\n  CONTRACT_ADDRESS,\n  GENESIS_CONTRACT_ADDRESS,\n  NETWORK,\n  POOL_REGISTRY_CONTRACT_NAME,\n  STACK_API_URL,\n} from './constants';\n\nconst contractAddress = CONTRACT_ADDRESS;\nconst contractName = POOL_REGISTRY_CONTRACT_NAME;\n\nexport async function fetchPool(poolId) {\n  const receipt = await callReadOnlyFunction({\n    contractAddress,\n    contractName,\n    functionName: 'get-pool',\n    functionArgs: [uintCV(poolId)],\n    network: NETWORK,\n    senderAddress: contractAddress,\n  });\n  console.log(receipt);\n  if (receipt.type === ClarityType.OptionalNone) {\n    return undefined;\n  } else {\n    return receipt.value;\n  }\n}\n\nexport async function fetchPools({ verify = false, offset = 0 }) {\n  console.log({ verify, offset });\n  const idsCV = [...Array(10).keys()].map(i => uintCV(i + 1 + offset));\n  const receipt = await callReadOnlyFunction({\n    contractAddress,\n    contractName,\n    functionName: 'get-pools',\n    functionArgs: [listCV(idsCV)],\n    network: NETWORK,\n    senderAddress: contractAddress,\n  });\n\n  const verifiedPools = await Promise.all(\n    receipt.list.map(async (cv, index) => {\n      if (cv.type === ClarityType.OptionalNone) {\n        return cv;\n      } else {\n        const poolCV = cv.value;\n        poolCV.data['pool-id'] = idsCV[index];\n        if (verify) {\n          const verified = await verifyUrl(\n            poolCV.data.url.data,\n            usernameCVToName(poolCV.data.name)\n          );\n          poolCV.data['verified'] = verified ? trueCV() : falseCV();\n          return poolCV;\n        } else {\n          return poolCV;\n        }\n      }\n    })\n  );\n\n  return verifiedPools.reduce((result, cv) => {\n    if (cv.type === ClarityType.OptionalNone) {\n      return result;\n    } else {\n      result.push(cv);\n      return result;\n    }\n  }, []);\n}\n\nexport function nameToUsernameCV(fullQualifiedName) {\n  const parts = fullQualifiedName.split('.');\n  if ((parts.length = 2)) {\n    const [name, namespace] = parts;\n    console.log(parts);\n    return tupleCV({ name: bufferCVFromString(name), namespace: bufferCVFromString(namespace) });\n  } else {\n    return undefined;\n  }\n}\n\nexport function usernameCVToName(usernameCV) {\n  return `${usernameCV.data.name.buffer.toString()}.${usernameCV.data.namespace.buffer.toString()}`;\n}\n\nconst whiteListedUrls = {\n  'https://pool.friedger.de': 'friedgerpool.id',\n  'https://planbetter.org': 'planbetter.btc',\n  'www.secretlabs.com': 'xversepool.id',\n};\n\nexport async function verifyUrl(url, username) {\n  const whiteListedUsername = whiteListedUrls[url];\n  if (whiteListedUsername) {\n    return whiteListedUsername === username;\n  } else {\n    try {\n      const result = await fetch(url + '/manifest.json');\n      const manifest = await result.json();\n      console.log({ manifest, username }, manifest.author === username);\n      if (manifest.author) {\n        whiteListedUrls[url] = manifest.author;\n      }\n      return manifest.author === username;\n    } catch (e) {\n      console.log(e);\n      return false;\n    }\n  }\n}\n\nconst whiteListedContracts = {};\nwhiteListedContracts[\n  `${GENESIS_CONTRACT_ADDRESS}/pox/${CONTRACT_ADDRESS}/${POOL_REGISTRY_CONTRACT_NAME}/pool-trait`\n] = true;\n\nexport async function findTraitIndex(ctrAddress, ctrName) {\n  if (await verifyContractTrait(ctrAddress, ctrName, 'pool-trait')) {\n    return 0;\n  } else if (await verifyContractTrait(ctrAddress, ctrName, 'pool-trait-ext')) {\n    return 1;\n  } else if (await verifyContractTrait(ctrAddress, ctrName, 'pool-trait-ext2')) {\n    return 2;\n  } else {\n    return -1;\n  }\n}\n\nexport const registerFunctions = ['register', 'register-ext', 'register-ext2'];\nexport const updateFunctions = ['update', 'update-ext', 'update-ext2'];\n\nexport function getPoolContractId(pool) {\n  const contractCV =\n    pool.data.contract.type === ClarityType.OptionalSome\n      ? pool.data.contract.value\n      : pool.data.contract.ext && pool.data.contract.ext.type === ClarityType.OptionalSome\n      ? pool.data['extended-contract']\n      : pool.data['extended2-contract'];\n  return cvToString(contractCV);\n}\n\nasync function verifyContractTrait(ctrAddress, ctrName, traitName) {\n  const path = `${ctrAddress}/${ctrName}/${CONTRACT_ADDRESS}/${POOL_REGISTRY_CONTRACT_NAME}/${traitName}`;\n\n  console.log({ path });\n  if (path in whiteListedContracts) {\n    return whiteListedContracts[path];\n  } else {\n    let isImplemented;\n    const result = await fetch(`${STACK_API_URL}/v2/traits/${path}`);\n    console.log({ result });\n    if (result.status === 404) {\n      isImplemented = false;\n    } else {\n      isImplemented = (await result.json()).is_implemented;\n    }\n    whiteListedContracts.path = isImplemented;\n    return isImplemented;\n  }\n}\n","import React, { useRef, useState, useEffect } from 'react';\n\nimport { accountsApi, NETWORK, smartContractsApi } from '../lib/constants';\nimport { TxStatus } from '../lib/transactions';\nimport { fetchAccount } from '../lib/account';\nimport { useConnect as useStacksJsConnect } from '@stacks/connect-react';\nimport {\n  bufferCV,\n  ClarityType,\n  contractPrincipalCV,\n  cvToHex,\n  cvToString,\n  hexToCV,\n  noneCV,\n  PostConditionMode,\n  someCV,\n  standardPrincipalCV,\n  tupleCV,\n  uintCV,\n} from '@stacks/transactions';\nimport * as c32 from 'c32check';\nimport { poxAddrCV, poxAddrCVFromBitcoin } from '../lib/pools-utils';\nimport { StackingClient } from '@stacks/stacking';\nimport { Amount } from './Amount';\nimport { PoXRevoke } from './PoXRevoke';\n\nfunction getPayoutAddress(payout, stxAddress) {\n  console.log({ payout, stxAddress });\n  if (!stxAddress) return undefined;\n  switch (payout) {\n    case 'BTC':\n      return c32.c32ToB58(stxAddress);\n    case 'STX':\n      return stxAddress;\n    default:\n      return stxAddress;\n  }\n}\n\nfunction getPayoutAddressCV(payout, address) {\n  switch (payout) {\n    case 'BTC':\n      return poxAddrCVFromBitcoin(address);\n    case 'STX':\n      return poxAddrCV(address);\n    default:\n      return tupleCV({\n        hashbytes: bufferCV(Buffer.from([0])),\n        version: bufferCV(Buffer.from([0])),\n      });\n  }\n}\n\nexport function PoolJoinSimple({ delegatee, ownerStxAddress, userSession }) {\n  console.log({ ownerStxAddress, userSession });\n  const { doContractCall } = useStacksJsConnect();\n  const amount = useRef();\n  const duration = useRef();\n  const payoutAddress = useRef();\n  const lockingPeriod = useRef();\n\n  const [status, setStatus] = useState();\n  const [txId, setTxId] = useState();\n  const [stackingStatus, setStackingStatus] = useState();\n  const [delegationState, setDelegationState] = useState();\n  const [suggestedAmount, setSuggestedAmount] = useState();\n  const [loading, setLoading] = useState(false);\n  const [progress1, setProgress1] = useState(5);\n  const [progress2, setProgress2] = useState(0);\n  const [progress3, setProgress3] = useState(0);\n  const [progress4, setProgress4] = useState(0);\n\n  const contractId = 'SP000000000000000000002Q6VF78.pox';\n  const [contractAddress, contractName] = contractId.split('.');\n\n  useEffect(() => {\n    if (ownerStxAddress) {\n      fetchAccount(ownerStxAddress)\n        .catch(e => {\n          setStatus('Failed to access your account', e);\n          console.log(e);\n          setProgress1(25);\n        })\n        .then(async acc => {\n          setStatus(undefined);\n          console.log({ acc });\n          setProgress1(25);\n        });\n      accountsApi.getAccountBalance({ principal: ownerStxAddress }).then(balance => {\n        console.log(balance);\n        const stxBalance = (parseInt(balance.stx.balance) - parseInt(balance.stx.locked)) / 1000000;\n        setSuggestedAmount(Math.min(stxBalance, 100));\n        setProgress2(25);\n      });\n\n      const client = new StackingClient(ownerStxAddress, NETWORK);\n      client.getStatus().then(s => {\n        setStackingStatus(s);\n        setProgress3(25);\n      });\n      smartContractsApi\n        .getContractDataMapEntry({\n          contractAddress: 'SP000000000000000000002Q6VF78',\n          contractName: 'pox',\n          mapName: 'delegation-state',\n          key: cvToHex(tupleCV({ stacker: standardPrincipalCV(ownerStxAddress) })),\n          network: NETWORK,\n        })\n        .then(result => {\n          const mapEntry = hexToCV(result.data);\n\n          if (mapEntry.type === ClarityType.OptionalNone) {\n            setDelegationState({ state: undefined });\n          } else {\n            setDelegationState({ state: mapEntry.value });\n          }\n          setProgress4(25);\n        });\n    }\n  }, [ownerStxAddress, setSuggestedAmount]);\n\n  const isSimple = true;\n  const parts = delegatee.split('.');\n  const delegateeCV =\n    parts.length < 2 ? standardPrincipalCV(parts[0]) : contractPrincipalCV(parts[0], parts[1]);\n  const rewardBtcAddressCV = noneCV();\n  const payout = 'STX';\n  const userPayoutAddress = getPayoutAddress(payout, ownerStxAddress);\n\n  const joinAction = async () => {\n    setLoading(true);\n    const amountCV = uintCV(amount.current.value.trim() * 1000000); // convert to uSTX\n    const durationCV = duration.current.value.trim()\n      ? someCV(uintCV(duration.current.value.trim()))\n      : noneCV();\n    const payoutAddressCV = isSimple\n      ? undefined\n      : getPayoutAddressCV(payout, payoutAddress.current.value.trim());\n    const lockingPeriodCV = isSimple ? undefined : uintCV(lockingPeriod.current.value.trim);\n    try {\n      setStatus(`Sending transaction`);\n      const functionArgs = isSimple\n        ? [amountCV, delegateeCV, durationCV, rewardBtcAddressCV]\n        : [amountCV, delegateeCV, durationCV, rewardBtcAddressCV, payoutAddressCV, lockingPeriodCV];\n      console.log({ functionArgs });\n      await doContractCall({\n        contractAddress,\n        contractName,\n        functionName: 'delegate-stx',\n        functionArgs,\n        postConditionMode: PostConditionMode.Deny,\n        postConditions: [],\n        userSession,\n        network: NETWORK,\n        onFinish: data => {\n          console.log(data);\n          setStatus(undefined);\n          setTxId(data.txId);\n          setLoading(false);\n        },\n      });\n    } catch (e) {\n      console.log(e);\n      setStatus(e.toString());\n      setLoading(false);\n    }\n  };\n\n  const progress = progress1 + progress2 + progress3 + progress4;\n  return (\n    <div>\n      {progress < 100 && (\n        <div class=\"progress\">\n          <div\n            class=\"progress-bar\"\n            role=\"progressbar\"\n            style={{ width: `${progress}%` }}\n            aria-valuenow={progress}\n            aria-valuemin=\"0\"\n            aria-valuemax=\"100\"\n          />\n        </div>\n      )}\n      <section>\n        {delegationState &&\n          (delegationState.state ? (\n            <>\n              You have joined the pool {cvToString(delegationState.state.data['delegated-to'])} with{' '}\n              <Amount ustx={delegationState.state.data['amount-ustx'].value} />.\n              <br />\n              <PoXRevoke userSession={userSession} setStatus={setStatus} setTxId={setTxId}/>\n            </>\n          ) : (\n            <>You are not delegating to any pool.</>\n          ))}\n      </section>\n      <section>\n        {stackingStatus &&\n          (stackingStatus.stacked ? (\n            <>\n              You stacked <Amount ustx={stackingStatus.details.amount_microstx} /> until cycle #\n              {stackingStatus.details.first_reward_cycle + stackingStatus.details.lock_period}.\n            </>\n          ) : (\n            <>Your Stacks tokens are not locked.</>\n          ))}\n        {progress < 100 && (\n          <div\n            role=\"status\"\n            className=\"spinner-border spinner-border-sm text-info align-text-top mr-2\"\n          />\n        )}\n      </section>\n      {stackingStatus && !stackingStatus.stacked && delegationState && !delegationState.state && (\n        <>\n          <h5>Join the pool</h5>\n          Pool address: <strong>{delegatee}</strong>\n          <div className=\"NoteField\">\n            Choose an amount, how much you would like to \"delegately\" stack through this pool (can\n            be higher than your balance to compound future rewards if stacking indefinitely).\n            <input\n              type=\"number\"\n              step=\"any\"\n              min=\"100\"\n              ref={amount}\n              defaultValue={suggestedAmount}\n              className=\"form-control\"\n              placeholder=\"Amount in STX\"\n              onKeyUp={e => {\n                if (e.key === 'Enter') duration.current.focus();\n              }}\n              onBlur={e => {\n                setStatus(undefined);\n              }}\n            />\n            <br />\n            Duration of your pool membership (until BTC block)\n            <input\n              type=\"text\"\n              ref={duration}\n              className=\"form-control\"\n              placeholder=\"Leave empty for indefinite duration\"\n              onKeyUp={e => {\n                if (e.key === 'Enter') lockingPeriod.current.focus();\n              }}\n              onBlur={e => {\n                setStatus(undefined);\n              }}\n            />\n            <br />\n            {delegatee === 'SPSTX06BNGJ2CP1F6WA8V49B6MYD784N6YZMK95G' && (\n              <>\n                Locking Period (how long do you want to swim this time?)\n                <input\n                  type=\"text\"\n                  ref={lockingPeriod}\n                  className=\"form-control\"\n                  placeholder=\"Number of cycles\"\n                  disabled={isSimple}\n                  defaultValue={2}\n                  onKeyUp={e => {\n                    if (e.key === 'Enter') payoutAddress.current.focus();\n                  }}\n                  onBlur={e => {\n                    setStatus(undefined);\n                  }}\n                />\n                <br />\n                Payout address (how would you like to get your rewards)\n                <input\n                  type=\"text\"\n                  ref={payoutAddress}\n                  className=\"form-control\"\n                  defaultValue={userPayoutAddress}\n                  disabled={isSimple}\n                  onKeyUp={e => {\n                    if (e.key === 'Enter') joinAction();\n                  }}\n                  onBlur={e => {\n                    setStatus(undefined);\n                  }}\n                />\n                <br />\n              </>\n            )}\n            <div className=\"input-group-append\">\n              <button className=\"btn btn-outline-secondary\" type=\"button\" onClick={joinAction}>\n                <div\n                  role=\"status\"\n                  className={`${\n                    loading ? '' : 'd-none'\n                  } spinner-border spinner-border-sm text-info align-text-top mr-2`}\n                />\n                Delegate\n              </button>\n            </div>\n          </div>\n          <div>\n            <TxStatus txId={txId} resultPrefix=\"You joined the pool \" />\n          </div>\n          {status && (\n            <>\n              <div>{status}</div>\n            </>\n          )}\n        </>\n      )}\n    </div>\n  );\n}\n","import {\n  createStacksPrivateKey,\n  getPublicKey,\n  addressFromPublicKeys,\n  AddressVersion,\n  AddressHashMode,\n  callReadOnlyFunction,\n  bufferCVFromString,\n  ClarityType,\n  cvToString,\n  cvToHex,\n  standardPrincipalCV,\n  hexToCV,\n} from '@stacks/transactions';\nimport {\n  accountsApi,\n  BNS_CONTRACT_NAME,\n  GENESIS_CONTRACT_ADDRESS,\n  NETWORK,\n  smartContractsApi,\n  STACKS_API_ACCOUNTS_URL,\n} from './constants';\n\nexport function getStacksAccount(appPrivateKey) {\n  const privateKey = createStacksPrivateKey(appPrivateKey);\n  const publicKey = getPublicKey(privateKey);\n  const address = addressFromPublicKeys(\n    AddressVersion.MainnetSingleSig,\n    AddressHashMode.SerializeP2PKH,\n    1,\n    [publicKey]\n  );\n  return { privateKey, address };\n}\n\nexport async function getUserAddress(userSession, username) {\n  const parts = username.split('.');\n  if (parts.length === 2) {\n    console.log(parts);\n    const result = await callReadOnlyFunction({\n      contractAddress: GENESIS_CONTRACT_ADDRESS,\n      contractName: BNS_CONTRACT_NAME,\n      functionName: 'name-resolve',\n      functionArgs: [bufferCVFromString(parts[1]), bufferCVFromString(parts[0])],\n      network: NETWORK,\n      senderAddress: GENESIS_CONTRACT_ADDRESS,\n    });\n    if (result.type === ClarityType.ResponseOk) {\n      return { address: cvToString(result.value.data.owner) };\n    } else {\n      return undefined;\n    }\n  } else {\n    return undefined;\n  }\n}\n\n/**\n * Uses the AccountsApi of the stacks blockchain api client library,\n * returns the stacks balance object with property `balance` in decimal.\n */\nexport function fetchAccount(addressAsString) {\n  console.log(`Checking account \"${addressAsString}\"`);\n  if (addressAsString) {\n    return accountsApi\n      .getAccountBalance({ principal: addressAsString })\n      .then(response => response.stx);\n  } else {\n    return Promise.reject();\n  }\n}\n\n/**\n * Uses the RCP api of the stacks node directly,\n * returns the json object with property `balance` in hex.\n */\nexport function fetchAccount2(addressAsString) {\n  console.log('Checking account');\n  const balanceUrl = `${STACKS_API_ACCOUNTS_URL}/${addressAsString}`;\n  return fetch(balanceUrl).then(r => {\n    console.log({ r });\n    return r.json();\n  });\n}\n\nexport async function getUsername(addressAsString) {\n  const nameResult = await smartContractsApi.callReadOnlyFunction({\n    contractAddress: GENESIS_CONTRACT_ADDRESS,\n    contractName: 'bns',\n    functionName: 'resolve-principal',\n    readOnlyFunctionArgs: {\n      sender: addressAsString,\n      arguments: [cvToHex(standardPrincipalCV(addressAsString))],\n    },\n  });\n  if (nameResult.okay && nameResult.result !== '0x09') {\n    const resultCV = hexToCV(nameResult.result);\n    if (resultCV.type === ClarityType.ResponseOk) {\n      return resultCV.value;\n    } else {\n      console.log({ nameResult });\n      console.log('No name found. Error: ' + resultCV.value.data.code.value.toString(10));\n      return undefined;\n    }\n  } else {\n    return undefined;\n  }\n}\n","import { AddressHashMode, bufferCV, tupleCV } from '@stacks/transactions';\nimport { address } from 'bitcoinjs-lib';\nimport * as c32 from 'c32check';\n\nfunction getAddressHashMode(btcAddress) {\n  if (btcAddress.startsWith('bc1') || btcAddress.startsWith('tb1')) {\n    const { data } = address.fromBech32(btcAddress);\n    if (data.length === 32) {\n      return AddressHashMode.SerializeP2WSH;\n    } else {\n      return AddressHashMode.SerializeP2WPKH;\n    }\n  } else {\n    const { version } = address.fromBase58Check(btcAddress);\n    switch (version) {\n      case 0:\n        return AddressHashMode.SerializeP2PKH;\n      case 111:\n        return AddressHashMode.SerializeP2PKH;\n      case 5:\n        return AddressHashMode.SerializeP2SH;\n      case 196:\n        return AddressHashMode.SerializeP2SH;\n      default:\n        throw new Error('Invalid pox address version');\n    }\n  }\n}\n\nexport function addressHashModeToBtcVersion(hashMode, mainnet = true) {\n  switch (hashMode) {\n    case AddressHashMode.SerializeP2PKH:\n      return mainnet ? 0 : 111;\n    case AddressHashMode.SerializeP2SH:\n      return mainnet ? 5 : 196;\n    default:\n      throw new Error('Invalid hash mode');\n  }\n}\n\nfunction decodeBtcAddress(btcAddress) {\n  const hashMode = getAddressHashMode(btcAddress);\n  if (btcAddress.startsWith('bc1') || btcAddress.startsWith('tb1')) {\n    const { data } = address.fromBech32(btcAddress);\n    return {\n      hashMode,\n      data,\n    };\n  } else {\n    const { hash } = address.fromBase58Check(btcAddress);\n    return {\n      hashMode,\n      data: hash,\n    };\n  }\n}\n\nfunction decodeStxAddress(stxAddress) {\n  const btcAddress = c32.c32ToB58(stxAddress);\n  return decodeBtcAddress(btcAddress);\n}\n\nexport function poxAddrCVFromBitcoin(btcAddress) {\n  const { hashMode, data } = decodeBtcAddress(btcAddress);\n  return tupleCV({\n    hashbytes: bufferCV(data),\n    version: bufferCV(Buffer.from([hashMode])),\n  });\n}\n\nexport function poxAddrCV(stxAddress) {\n  const { hashMode, data } = decodeStxAddress(stxAddress);\n  console.log({hashMode, data})\n  return tupleCV({\n    hashbytes: bufferCV(data),\n    version: bufferCV(Buffer.from([hashMode])),\n  });\n}\n\nexport function poxCVToBtcAddress(poxAddrCV) {\n  return address.toBase58Check(\n    poxAddrCV.data.hashbytes.buffer,\n    addressHashModeToBtcVersion(poxAddrCV.data.version.buffer.valueOf()[0], true)\n  );\n}\n","var map = {\n\t\"./connect-modal.entry.js\": [\n\t\t779,\n\t\t4\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 766;\nmodule.exports = webpackAsyncContext;","import { useCallback } from 'react';\nimport { AppConfig, UserSession } from '@stacks/connect-react';\nimport { showConnect } from '@stacks/connect';\nimport { authOrigin } from './constants';\nimport { atom, useAtom } from 'jotai';\nimport { useUpdateAtom } from 'jotai/utils';\n\nconst appConfig = new AppConfig(['store_write', 'publish_data']);\nexport const userSessionState = atom(new UserSession({ appConfig }));\nexport const userDataState = atom();\nexport const authResponseState = atom();\n\nexport const useConnect = () => {\n  const [userSession] = useAtom(userSessionState);\n  const setUserData = useUpdateAtom(userDataState);\n  const setAuthResponse = useUpdateAtom(authResponseState);\n\n  const onFinish = async payload => {\n    setAuthResponse(payload.authResponse);\n    const userData = await payload.userSession.loadUserData();\n    setUserData(userData);\n  };\n\n  const authOptions = {\n    authOrigin: authOrigin,\n    onFinish,\n    userSession, // usersession is already in state, provide it here\n    redirectTo: '/',\n    manifestPath: '/manifest.json',\n    appDetails: {\n      name: 'Pool Registry',\n      icon: '/pool-registry.png',\n    },\n  };\n\n  const handleOpenAuth = () => {\n    showConnect(authOptions);\n  };\n\n  const handleSignOut = useCallback(() => {\n    userSession?.signUserOut(\"/\");\n  }, [userSession]);\n\n  return { handleOpenAuth, handleSignOut, authOptions };\n};\n","import React from 'react';\nimport { useConnect } from '../lib/auth';\nimport { CONTRACT_ADDRESS, POOL_REGISTRY_CONTRACT_NAME } from '../lib/constants';\n\n// Landing page demonstrating Blockstack connect for registration\n\nexport default function Landing(props) {\n  const { handleOpenAuth } = useConnect();\n\n  return (\n    <div className=\"Landing\">\n      <div className=\"jumbotron jumbotron-fluid pt-3 mb-0\">\n        <div className=\"container\">\n          <div className=\"panel-landing text-center mt-3\">\n            <h1 className=\"landing-heading\">Pool Registry</h1>\n            <p className=\"lead\">A simple app to join and register Stacking Pools</p>\n\n            <p className=\"alert alert-info  border-info\">\n              Pool Registry is an{' '}\n              <a\n                href=\"https://github.com/friedger/starter-app\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                open source\n              </a>{' '}\n              web app with the purpose of{' '}\n              <strong>helping everybody quickly find and join a Stacking Pool.</strong>\n            </p>\n\n            <div className=\"card mt-4 border-info\">\n              <div className=\"card-header\">\n                <h5 className=\"card-title\">About Delegated Stacking</h5>\n              </div>\n              <div className=\"row\">\n                <div className=\"col col-md-12 p-4\">\n                  Delegated Stacking is a way to participate in the Proof of Transfer consensus\n                  algorithm with small amounts of STX.\n                </div>\n              </div>\n            </div>\n\n            <div className=\"card mt-4 border-info\">\n              <div className=\"card-header\">\n                <h5 className=\"card-title\">Pool Registry</h5>\n              </div>\n              <div className=\"card-body\">\n                <p className=\"card-text mb-3\">\n                  Pool Registry is a web interface to the pool registry smart contract{' '}\n                  <a href={`https://explorer.stacks.co/txid/${CONTRACT_ADDRESS}.${POOL_REGISTRY_CONTRACT_NAME}?chain=mainnet`}>\n                    {CONTRACT_ADDRESS}.{POOL_REGISTRY_CONTRACT_NAME}\n                  </a>\n                  .\n                </p>\n              </div>\n\n              <p className=\"card-link mb-5\">\n                <button className=\"btn btn-outline-primary\" type=\"button\" onClick={handleOpenAuth}>\n                  Start now\n                </button>\n              </p>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","import React from 'react';\nimport { CONTRACT_ADDRESS, POOL_REGISTRY_CONTRACT_NAME } from '../lib/constants';\n\nexport default function Overview(props) {\n  return (\n    <main className=\"panel-welcome mt-5 container\">\n      <div className=\"lead row mt-5 mb-3\">\n        <div className=\"col-xs-10 col-md-8 mx-auto px-4\">\n          <h1 className=\"card-title\">Overview</h1>\n        </div>\n        <div className=\"col-xs-10 col-md-8 mx-auto mb-3 px-4\">\n          This site allows you engage with the Stacks Proof of Transfer consensus algorithm through\n          delegated stacking.\n        </div>\n        <div className=\"col-xs-10 col-md-8 mx-auto mb-3 px-4\">\n          You can learn about delegated stacking at\n          <ul>\n            <li>\n              <a href=\"https://stacks101.com\">stacks101.com</a>\n            </li>\n            <li>\n              <a href=\"https://stacking.club/learn\">stacking.club/learn</a>\n            </li>\n          </ul>\n        </div>\n        <div className=\"col-xs-10 col-md-8 mx-auto mb-3 px-4\">\n          Pool Registry is a web interface to the pool registry smart contract{' '}\n          <a\n            href={`https://explorer.stacks.co/txid/${CONTRACT_ADDRESS}.${POOL_REGISTRY_CONTRACT_NAME}?chain=mainnet`}\n          >\n            {CONTRACT_ADDRESS}.{POOL_REGISTRY_CONTRACT_NAME}\n          </a>\n          .\n        </div>\n      </div>\n    </main>\n  );\n}\n","import React from 'react';\nimport { useConnect, userSessionState } from '../lib/auth';\nimport { useAtom } from 'jotai';\n// Authentication button adapting to status\n\nexport default function Auth() {\n  const { handleSignOut } = useConnect();\n  const [userSession] = useAtom(userSessionState);\n\n  if (userSession?.isUserSignedIn()) {\n    return (\n      <button\n        className=\"btn btn-primary btn-lg\"\n        onClick={() => {\n          console.log('signOut');\n          handleSignOut();\n        }}\n      >\n        Log Out\n      </button>\n    );\n  } else {\n    return null;\n  }\n}\n","import { getUserData } from '@stacks/connect-react';\nimport { addressToString } from '@stacks/transactions';\n\nimport { useState, useEffect } from 'react';\nimport { getStacksAccount } from './account';\n\nexport function useStxAddresses(userSession) {\n  const [ownerStxAddress, setOwnerStxAddress] = useState();\n  const [appStxAddress, setAppStxAddress] = useState();\n  const [appPrivateKey, setAppPrivateKey] = useState();\n  useEffect(() => {\n    getUserData(userSession).then(userData => {\n      const { address } = getStacksAccount(userData.appPrivateKey);\n      setAppStxAddress(addressToString(address));\n      setOwnerStxAddress(userData.profile.stxAddress.mainnet);\n      setAppPrivateKey(userData.appPrivateKey);\n    });\n  }, [userSession]);\n\n  return { ownerStxAddress, appStxAddress, appPrivateKey };\n}\n","import React, { useRef } from 'react';\n\nimport { useNavigate } from '@reach/router';\nimport PoolInfo from './PoolInfo';\n\nfunction hasJoined(pool, userInfo) {\n  return pool === userInfo?.delegation?.delegatedTo;\n}\n\nfunction isStacking(pool, userInfo) {\n  return pool === userInfo?.stacking?.poxAddr;\n}\n\nexport function Pool({ pool, poolId, userInfo }) {\n  const navigate = useNavigate();\n\n  const spinner = useRef();\n\n  return (\n    <div className='card m-3 p-2'>\n      {pool ? (\n        <>\n          <PoolInfo pool={pool} />\n          {(!userInfo || userInfo.canJoin) && (\n            <div className=\"input-group \">\n              <button\n                className=\"btn btn-outline-secondary\"\n                type=\"button\"\n                onClick={() => {\n                  navigate(`/pools/${poolId}`, { state: { pool } });\n                }}\n              >\n                <div\n                  ref={spinner}\n                  role=\"status\"\n                  className=\"d-none spinner-border spinner-border-sm text-info align-text-top mr-2\"\n                />\n                Join Pool\n              </button>\n            </div>\n          )}\n          {userInfo && hasJoined(pool, userInfo) && <>You joined this pool.</>}\n          {userInfo && isStacking(pool, userInfo) && <>You are stacking with this pool.</>}\n        </>\n      ) : (\n        <>\n          <br />\n          Pool does not exist.\n          <br />\n          <br />\n        </>\n      )}\n    </div>\n  );\n}\n","import React, { useState, useEffect } from 'react';\n\nimport { Pool } from './Pool';\nimport { fetchPools, usernameCVToName } from '../lib/pools';\nimport { poxCVToBtcAddress } from '../lib/pools-utils';\nimport { cvToString } from '@stacks/transactions';\n\nexport function PoolList({ payout, lockingPeriod, search, verifyUsername }) {\n  const [status, setStatus] = useState();\n  const [pools, setPools] = useState();\n\n  useEffect(() => {\n    setStatus('Loading pools');\n    fetchPools({ verify: verifyUsername })\n      .then(async pools => {\n        setStatus(undefined);\n        console.log(pools);\n        setPools(pools);\n      })\n      .catch(e => {\n        setStatus('Failed to get pools', e);\n        console.log(e);\n      });\n  }, [verifyUsername]);\n\n  const filteredPools =\n    pools &&\n    pools.filter(\n      pool =>\n        (!payout || pool.data['payout'].data === payout) &&\n        (!lockingPeriod ||\n          isNaN(lockingPeriod) ||\n          pool.data['locking-period'].list.findIndex(item => {\n            console.log({ i: item.value, lp: lockingPeriod });\n            return item.value >= lockingPeriod;\n          }) >= 0) &&\n        (!search ||\n          pool.data.fees.data.indexOf(search) >= 0 ||\n          pool.data['date-of-payout'].data.indexOf(search) >= 0 ||\n          pool.data['url'].data.indexOf(search) >= 0 ||\n          usernameCVToName(pool.data.name).indexOf(search) >= 0 ||\n          pool.data['pox-address'].list\n            .map(addr => poxCVToBtcAddress(addr))\n            .join(' ')\n            .indexOf(search) >= 0 ||\n          cvToString(pool.data.delegatee).indexOf(search) >= 0)\n    );\n  return (\n    <div>\n      {filteredPools &&\n        filteredPools.map((pool, key) => {\n          return <Pool key={key} pool={pool} poolId={pool.data['pool-id'].value} />;\n        })}\n      {!status && (!filteredPools || filteredPools.length === 0) && <>No pools found.</>}\n      {status && (\n        <>\n          <div>{status}</div>\n        </>\n      )}\n    </div>\n  );\n}\n","import React, { useState, useRef } from 'react';\n\nimport { useStxAddresses } from '../lib/hooks';\nimport { PoolList } from '../components/PoolList';\n\nexport default function PoolRegistry(props) {\n  const { ownerStxAddress } = useStxAddresses();\n  const payoutRef = useRef();\n  const lockingPeriodRef = useRef();\n  const searchRef = useRef();\n  const [payout, setPayout] = useState();\n  const [lockingPeriod, setLockingPeriod] = useState();\n  const [search, setSearch] = useState();\n\n  return (\n    <main className=\"panel-welcome mt-5 container\">\n      <div className=\"lead row mt-5\">\n        <div className=\"col-xs-10 col-md-8 mx-auto px-4\">\n          <h1 className=\"card-title\">List of public pools</h1>\n        </div>\n        <div className=\"col-xs-10 col-md-8 mx-auto px-4\">\n          <select\n            ref={payoutRef}\n            onChange={e => {\n              setPayout(e.target.value);\n            }}\n          >\n            <option value=\"\">any</option>\n            <option value=\"BTC\">BTC</option>\n            <option value=\"STX\">STX</option>\n          </select>\n          <input\n            type=\"number\"\n            ref={lockingPeriodRef}\n            placeholder=\"minimum locking period\"\n            onChange={e => {\n              setLockingPeriod(parseInt(e.target.value.trim()));\n            }}\n          />\n          <input\n            type=\"text\"\n            ref={searchRef}\n            placeholder=\"search term\"\n            onChange={e => {\n              setSearch(e.target.value.trim());\n            }}\n          />\n          <button\n            className=\"btn btn-outline-secondary\"\n            type=\"button\"\n            onClick={() => {\n              setPayout(payoutRef.current.value);\n              setLockingPeriod(parseInt(lockingPeriodRef.current.value.trim()));\n              setSearch(searchRef.current.value.trim());\n            }}\n          >\n            Filter\n          </button>\n        </div>\n        <div className=\"col-xs-10 col-md-8 mx-auto mb-4 px-4\">\n          <PoolList\n            ownerStxAddress={ownerStxAddress}\n            payout={payout}\n            lockingPeriod={lockingPeriod}\n            search={search}\n            verifyUsername\n          />\n        </div>\n\n        <div className=\"card col-md-8 mx-auto mt-5 mb-5 text-center px-0 border-warning\">\n          <div className=\"card-header\">\n            <h5 className=\"card-title\">Instructions</h5>\n          </div>\n          <ul className=\"list-group list-group-flush\">\n            <li className=\"list-group-item\">Select the pool you trust and click the join button.</li>\n            <li className=\"list-group-item\">\n              Enter the amount, duration, and reward address to define how you would like to stack\n              and click delegate.\n            </li>\n            <li className=\"list-group-item\">\n              Wait for the pool admin to do the necessary and collect your rewards.\n            </li>\n          </ul>\n        </div>\n      </div>\n    </main>\n  );\n}\n","import React, { useEffect, useState } from 'react';\nimport { useStxAddresses } from '../lib/hooks';\nimport { PoolJoin } from '../components/PoolJoin';\nimport { fetchPool } from '../lib/pools';\n\nexport default function PoolDetails({ poolId, location, userSession }) {\n  const { ownerStxAddress } = useStxAddresses(userSession);\n  const [poolData, setPoolData] = useState();\n  console.log({ poolData });\n  useEffect(() => {\n    const fn = async () => {\n      const p = await fetchPool(poolId);\n      console.log(p);\n      setPoolData(p);\n    };\n    fn();\n  }, [poolId]);\n  return (\n    <main className=\"panel-welcome mt-5 container\">\n      <div className=\"lead row mt-5\">\n        <div className=\"col-xs-10 col-md-8 mx-auto px-4\">\n          <h1 className=\"card-title\">Pool</h1>\n        </div>\n\n        <div className=\"col-xs-10 col-md-8 mx-auto mb-4 px-4\">\n          {poolData && (\n            <PoolJoin\n              poolId={poolId}\n              pool={poolData}\n              ownerStxAddress={ownerStxAddress}\n              userSession={userSession}\n            />\n          )}\n        </div>\n\n        <div className=\"card col-md-8 mx-auto mt-5 mb-5 text-center px-0 border-warning\">\n          <div className=\"card-header\">\n            <h5 className=\"card-title\">Instructions</h5>\n          </div>\n          <ul className=\"list-group list-group-flush\">\n            <li className=\"list-group-item\">\n              Enter the amount, duration, and reward address to define how you would like to stack\n              and click delegate.\n            </li>\n            <li className=\"list-group-item\">\n              Wait for the pool admin to do the necessary and collect your rewards.\n            </li>\n          </ul>\n        </div>\n      </div>\n    </main>\n  );\n}\n","import { useCallback, useEffect, useRef, useState } from \"react\";\nimport { fetchAccount } from \"../lib/account\";\n\nexport function StxProfile({ stxAddress, updateStatus, showAddress }) {\n  const spinner = useRef();\n\n  const [profileState, setProfileState] = useState({\n    account: undefined,\n  });\n\n  const onRefreshBalance = useCallback(\n    async stxAddress => {\n      updateStatus(undefined);\n      spinner.current.classList.remove('d-none');\n\n      fetchAccount(stxAddress)\n        .then(acc => {\n          setProfileState({ account: acc });\n          spinner.current.classList.add('d-none');\n        })\n        .catch(e => {\n          updateStatus('Refresh failed');\n          console.log(e);\n          spinner.current.classList.add('d-none');\n        });\n    },\n    [updateStatus]\n  );\n\n  useEffect(() => {\n    fetchAccount(stxAddress).then(acc => {\n      setProfileState({ account: acc });\n    });\n  }, [stxAddress]);\n\n  return (\n    <>\n      {stxAddress && showAddress && (\n        <>\n          {stxAddress} <br />\n        </>\n      )}\n      {profileState.account && (\n        <>\n          Your balance: {(parseInt(profileState.account.balance) / 1000000).toFixed(6)} STX.\n          <br />\n        </>\n      )}\n      <button\n        className=\"btn btn-outline-secondary mt-1\"\n        onClick={e => {\n          onRefreshBalance(stxAddress);\n        }}\n      >\n        <div\n          ref={spinner}\n          role=\"status\"\n          className=\"d-none spinner-border spinner-border-sm text-info align-text-top mr-2\"\n        />\n        Refresh balance\n      </button>\n    </>\n  );\n}\n","import { getUserData } from '@stacks/connect-react';\nimport { Person } from '@stacks/profile';\n\nimport React, { useRef, useState, useCallback, useEffect } from 'react';\nimport { fetchAccount, getUsername } from '../lib/account';\nimport { useNavigate } from '@reach/router';\nimport { fetchPools } from '../lib/pools';\nimport PoolInfo from './PoolInfo';\nimport { PoXRevoke } from './PoXRevoke';\nimport { StxProfile } from './StxProfile';\n\n// Demonstrating BlockstackContext for legacy React Class Components.\n\nexport default function Profile({ stxAddresses, userSession }) {\n  const [status, setStatus] = useState('');\n  const [pools, setPools] = useState();\n  const [nameCV, setNameCV] = useState();\n  const navigate = useNavigate();\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    setLoading(true);\n    if (stxAddresses.ownerStxAddress) {\n      fetchPools({})\n        .then(async pools => {\n          setStatus(undefined);\n          console.log(pools);\n          setPools(pools);\n          setNameCV(await getUsername(stxAddresses.ownerStxAddress));\n          setLoading(false);\n        })\n        .catch(e => {\n          setStatus('Failed to get pools', e);\n          setLoading(false);\n          console.log(e);\n        });\n    }\n  }, [stxAddresses.ownerStxAddress]);\n\n  if (!userSession || !stxAddresses.ownerStxAddress) {\n    return <div>Loading</div>;\n  }\n\n  const { userData } = getUserData(userSession);\n  const person = userData && new Person(userData.profile);\n  const username = userData && userData.username;\n\n  const updateStatus = status => {\n    setStatus(status);\n    setTimeout(() => {\n      setStatus(undefined);\n    }, 2000);\n  };\n\n  const avatarFallbackImage = 'https://s3.amazonaws.com/onename/avatar-placeholder.png';\n  const proxyUrl = url => '/proxy/' + url.replace(/^https?:\\/\\//i, '');\n\n  return (\n    <div className=\"Profile\">\n      <div className=\"avatar-section text-center\">\n        <img\n          src={proxyUrl((person && person.avatarUrl()) || avatarFallbackImage)}\n          className=\"img-rounded avatar\"\n          id=\"avatar-image\"\n          alt=\"Avatar\"\n        />\n      </div>\n      <div className=\"text-center mt-2\">\n        Hello, <span id=\"heading-name\">{(person && person.name()) || username || 'Stacker'}</span>!\n      </div>\n      {(username || nameCV) && (\n        <>\n          Your Blockstack username is{' '}\n          {username ||\n            `${nameCV.data['name'].buffer.toString()}.${nameCV.data[\n              'namespace'\n            ].buffer.toString()}`}{' '}\n          <br />\n        </>\n      )}\n      <div className=\"pt-4\">\n        Your own Stacks address:\n        <br />\n        <StxProfile\n          stxAddress={stxAddresses.ownerStxAddress}\n          updateStatus={updateStatus}\n          showAddress\n        ></StxProfile>\n      </div>\n\n      {pools && nameCV && (\n        <div className=\"pt-4\">\n          {pools\n            .filter(p => isPoolOwned(p, nameCV))\n            .map(p => (\n              <div className=\"pt-4\">\n                <PoolInfo pool={p} />\n                <div className=\"input-group \">\n                  <button\n                    className=\"btn btn-outline-secondary\"\n                    type=\"button\"\n                    onClick={() => {\n                      console.log(p.data['pool-id']);\n                      navigate(`/me/edit/${p.data['pool-id'].value}`, {\n                        state: { pool: p },\n                      });\n                    }}\n                  >\n                    Edit Pool\n                  </button>\n                </div>\n              </div>\n            ))}\n        </div>\n      )}\n      {loading && <>Getting your pools' data and BNS username...</>}\n      <div className=\"input-group pt-4\">\n        <button\n          className=\"btn btn-outline-secondary\"\n          type=\"button\"\n          onClick={() => {\n            navigate(`/me/register`);\n          }}\n        >\n          Register New Pool\n        </button>\n      </div>\n      <div className=\"pt-4\">\n        If you want to revoke your membership of any pool, you can do it here.\n        <br/>\n        <PoXRevoke\n          userSession={userSession}\n          setStatus={setStatus}\n          setTxId={txId => setStatus(`Revoking with transcation ${txId}`)}\n        />\n      </div>\n      {status && (\n        <>\n          <br />\n          <div>{status}</div>\n        </>\n      )}\n    </div>\n  );\n}\n\nfunction isPoolOwned(pool, nameCV) {\n  console.log({ nameCV, pool });\n  return (\n    nameCV.data['namespace'].buffer.toString() ===\n      pool.data.name.data.namespace.buffer.toString() &&\n    nameCV.data['name'].buffer.toString() === pool.data.name.data.name.buffer.toString()\n  );\n}\n","import React from 'react';\nimport Profile from '../components/Profile';\nimport { useStxAddresses } from '../lib/hooks';\n\nexport default function MyProfile({ userSession }) {\n  console.log(userSession);\n  const { ownerStxAddress, appStxAddress } = useStxAddresses(userSession);\n\n  return (\n    <main className=\"panel-welcome mt-5 container\">\n      <div className=\"row\">\n        <div className=\"mx-auto col-sm-10 col-md-8 px-4\">\n          <Profile\n            stxAddresses={{\n              appStxAddress: appStxAddress,\n              ownerStxAddress: ownerStxAddress,\n            }}\n            userSession={userSession}\n          />\n        </div>\n      </div>\n    </main>\n  );\n}\n","import React, { useRef, useState, useEffect } from 'react';\n\nimport {\n  CONTRACT_ADDRESS,\n  GENESIS_CONTRACT_ADDRESS,\n  NETWORK,\n  POOL_REGISTRY_CONTRACT_NAME,\n} from '../lib/constants';\nimport { TxStatus } from '../lib/transactions';\nimport { fetchAccount, getUsername } from '../lib/account';\nimport { useConnect } from '@stacks/connect-react';\nimport {\n  bufferCVFromString,\n  callReadOnlyFunction,\n  ClarityType,\n  contractPrincipalCV,\n  cvToString,\n  FungibleConditionCode,\n  listCV,\n  makeStandardSTXPostCondition,\n  noneCV,\n  PostConditionMode,\n  someCV,\n  standardPrincipalCV,\n  stringAsciiCV,\n  uintCV,\n} from '@stacks/transactions';\nimport * as c32 from 'c32check';\nimport {\n  fetchPool,\n  findTraitIndex,\n  nameToUsernameCV,\n  registerFunctions,\n  updateFunctions,\n  verifyUrl,\n} from '../lib/pools';\nimport { poxAddrCVFromBitcoin, poxCVToBtcAddress } from '../lib/pools-utils';\nimport BN from 'bn.js';\n\nconst ERR_NAME = 'Name must contain 1 dot.';\nconst ERR_URL = 'Website url required!';\nconst ERR_REWARD_ADDRESS_1 = 'At least one reward address required.';\nconst ERR_INVALID_REWARD_ADDRESSES = 'Invalid Bitcoin address(es).';\nconst ERR_INVALID_CONTRACT_ID = 'Invalid contract id.';\nconst ERR_LOCKING_PERIOD_1 = 'At least one locking period required.';\nconst ERR_INVALID_LOCKING_PERIODS = 'Locking periods must be numbers between 1 and 12.';\nconst ERR_INVALID_STX_ADDRESS = 'Invalid STX address.';\nexport function PoolForm({ ownerStxAddress, register, poolId }) {\n  let title = 'Update pool';\n  let formButtonLabel;\n  if (register) {\n    title = 'Register a pool';\n    formButtonLabel = 'Register';\n  } else {\n    title = 'Update pool';\n    formButtonLabel = 'Update';\n  }\n  const { doContractCall } = useConnect();\n  const name = useRef();\n  const priceInfo = useRef();\n  const delegateeAddress = useRef();\n  const url = useRef();\n  const rewardBtcAddresses = useRef();\n  const contract = useRef();\n  const minimum = useRef();\n  const lockingPeriods = useRef();\n  const payout = useRef();\n  const dateOfPayout = useRef();\n  const fees = useRef();\n  const poolStatus = useRef();\n\n  const spinner = useRef();\n  const [status, setStatus] = useState();\n  const [txId, setTxId] = useState();\n  const [username, setUsername] = useState();\n  const [pool, setPool] = useState();\n  const [price, setPrice] = useState();\n\n  const btcAddressFromOwnerStxAddress = ownerStxAddress ? c32.c32ToB58(ownerStxAddress) : '';\n  useEffect(() => {\n    if (ownerStxAddress) {\n      fetchAccount(ownerStxAddress)\n        .catch(e => {\n          setStatus('Failed to access your account', e);\n          console.log(e);\n        })\n        .then(async acc => {\n          console.log({ acc });\n        });\n\n      getUsername(ownerStxAddress).then(resultCV => {\n        if (resultCV) {\n          setUsername(\n            `${resultCV.data['name'].buffer.toString()}.${resultCV.data[\n              'namespace'\n            ].buffer.toString()}`\n          );\n        } else {\n          setUsername(undefined);\n        }\n      });\n\n      if (poolId) {\n        fetchPool(poolId).then(pool => {\n          console.log({ pool });\n          setPool(pool);\n        });\n      }\n    }\n  }, [ownerStxAddress, poolId]);\n\n  const formAction = async () => {\n    let functionName;\n    let stxPostCondition;\n    let priceBN;\n\n    const errors = validateForm();\n    if (errors.length > 0) {\n      setStatus(\n        errors.map(e => (\n          <>\n            {e}\n            <br />\n          </>\n        ))\n      );\n      return;\n    } else {\n      setStatus(undefined);\n    }\n\n    const [poolCtrAddress, poolCtrName] = contract.current.value.trim().split('.');\n    const traitIndex = await findTraitIndex(poolCtrAddress, poolCtrName);\n    if (traitIndex < 0) {\n      setStatus('Invalid pool contract');\n      return;\n    }\n    if (register) {\n      functionName = registerFunctions[traitIndex];\n      if (username) {\n        priceBN = new BN(0);\n      } else {\n        if (!price) {\n          await checkPrice();\n        }\n        priceBN = new BN(price * 1000000);\n      }\n    } else {\n      functionName = updateFunctions[traitIndex];\n      priceBN = new BN(0);\n    }\n\n    if (username && !(await checkUrl(url.current.value.trim(), username))) {\n      setStatus(`Website manifest.json must contain entry \"author\":\"${username}\"`);\n      return;\n    }\n    stxPostCondition = makeStandardSTXPostCondition(\n      ownerStxAddress,\n      FungibleConditionCode.Equal,\n      priceBN\n    );\n    spinner.current.classList.remove('d-none');\n\n    const usernameCV = nameToUsernameCV(name.current.value.trim());\n    if (!usernameCV) {\n      setStatus(ERR_NAME);\n      return;\n    }\n    const delegateeParts = delegateeAddress.current.value.trim().split('.');\n\n    const delegateeCV =\n      delegateeParts.length === 1\n        ? standardPrincipalCV(delegateeParts[0])\n        : contractPrincipalCV(delegateeParts[0], delegateeParts[1]);\n    const poxAddressesCV = listCV(\n      rewardBtcAddresses.current.value.split(',').map(addr => poxAddrCVFromBitcoin(addr.trim()))\n    );\n    const urlCV = stringAsciiCV(url.current.value.trim());\n    let minimumUstxCV;\n    if (minimum.current.value) {\n      minimumUstxCV = someCV(uintCV(parseInt(minimum.current.value) * 1000000));\n    } else {\n      minimumUstxCV = noneCV();\n    }\n\n    if (!lockingPeriods.current.value.trim()) {\n      setStatus('Locking Period required.');\n      return;\n    }\n    const lockingPeriodsCV = lockingPeriods.current.value.trim()\n      ? listCV(lockingPeriods.current.value.split(',').map(lp => uintCV(parseInt(lp.trim()))))\n      : listCV([]);\n    const payoutCV = stringAsciiCV(payout.current.value.trim());\n    const dateOfPayoutCV = stringAsciiCV(dateOfPayout.current.value.trim());\n    const feesCV = stringAsciiCV(fees.current.value.trim());\n    const contractCV = contractPrincipalCV(poolCtrAddress, poolCtrName);\n    const statusCV = uintCV(poolStatus.current.value);\n    console.log({ functionName, lockingPeriodCV: lockingPeriodsCV, poxAddressCV: poxAddressesCV });\n    try {\n      setStatus(`Sending transaction`);\n\n      await doContractCall({\n        contractAddress: CONTRACT_ADDRESS,\n        contractName: POOL_REGISTRY_CONTRACT_NAME,\n        functionName,\n        functionArgs: [\n          usernameCV,\n          delegateeCV,\n          poxAddressesCV,\n          urlCV,\n          contractCV,\n          minimumUstxCV,\n          lockingPeriodsCV,\n          payoutCV,\n          dateOfPayoutCV,\n          feesCV,\n          statusCV,\n        ],\n        postConditionMode: PostConditionMode.Deny,\n        postConditions: [stxPostCondition],\n        network: NETWORK,\n        finished: data => {\n          console.log(data);\n          setStatus(undefined);\n          setTxId(data.txId);\n          spinner.current.classList.add('d-none');\n        },\n      });\n    } catch (e) {\n      console.log(e);\n      setStatus(e.toString());\n      spinner.current.classList.add('d-none');\n    }\n  };\n\n  const checkPrice = async () => {\n    const requestedName = name.current.value.trim();\n    const parts = requestedName.split('.');\n    if (parts.length === 2) {\n      const priceResult = await callReadOnlyFunction({\n        contractAddress: GENESIS_CONTRACT_ADDRESS,\n        contractName: 'bns',\n        functionName: 'get-name-price',\n        functionArgs: [bufferCVFromString(parts[1]), bufferCVFromString(parts[0])],\n        senderAddress: ownerStxAddress,\n      });\n      console.log({ priceResult });\n      if (priceResult.type === ClarityType.ResponseOk) {\n        const priceUstx = priceResult.value.value / 1000000n;\n        setPrice(priceUstx);\n        priceInfo.current.innerHTML = `Price: ${priceUstx.toFixed(6)} STX`;\n      } else {\n        priceInfo.current.innerHTML = 'No price info found.';\n      }\n    } else {\n      priceInfo.current.innerHTML = ERR_NAME;\n    }\n  };\n\n  const checkUrl = async (url, username) => {\n    return verifyUrl(url, username);\n  };\n\n  const validateForm = () => {\n    const errors = [];\n    // username\n    if (name.current.value.trim().split('.').length !== 2) {\n      name.current.setCustomValidity(ERR_NAME);\n      errors.push(ERR_NAME);\n    } else {\n      name.current.setCustomValidity('');\n    }\n\n    // website\n    if (!url.current.value.trim()) {\n      url.current.setCustomValidity(ERR_URL);\n      errors.push(ERR_URL);\n    } else {\n      url.current.setCustomValidity('');\n    }\n\n    // delegatee address\n    try {\n      const [addr] = delegateeAddress.current.value.trim().split('.');\n      c32.c32addressDecode(addr);\n      delegateeAddress.current.setCustomValidity('');\n    } catch (e) {\n      console.log(e)\n      delegateeAddress.current.setCustomValidity(ERR_INVALID_STX_ADDRESS + ' ' + e.toString());\n      errors.push(ERR_INVALID_STX_ADDRESS);\n    }\n\n    // reward addresses\n    const addrList = rewardBtcAddresses.current.value.split(',');\n    if (addrList.length === 0) {\n      rewardBtcAddresses.setCustomValidity(ERR_REWARD_ADDRESS_1);\n      errors.push(ERR_REWARD_ADDRESS_1);\n    } else if (\n      !addrList.reduce((result, addr) => {\n        try {\n          c32.b58ToC32(addr.trim());\n          return result;\n        } catch (e) {\n          console.log(addr, e);\n          return false;\n        }\n      }, true)\n    ) {\n      rewardBtcAddresses.current.setCustomValidity(ERR_INVALID_REWARD_ADDRESSES);\n      errors.push(ERR_INVALID_REWARD_ADDRESSES);\n    } else {\n      rewardBtcAddresses.current.setCustomValidity('');\n    }\n\n    // contract\n    const [ctrAddr, ctrName] = contract.current.value.trim().split('.');\n    if (!ctrAddr || !ctrName) {\n      contract.current.setCustomValidity(ERR_INVALID_CONTRACT_ID);\n      errors.push(ERR_INVALID_CONTRACT_ID);\n    } else {\n      contract.current.setCustomValidity('');\n    }\n\n    // locking period\n    const lockingPeriodList = lockingPeriods.current.value.split(',');\n    if (lockingPeriodList.length === 0) {\n      lockingPeriods.current.setCustomValidity(ERR_LOCKING_PERIOD_1);\n      errors.push(ERR_LOCKING_PERIOD_1);\n    } else if (\n      !lockingPeriodList.reduce((result, lp) => {\n        const period = parseInt(lp.trim());\n        return result && !isNaN(period) && period >= 1 && period <= 12;\n      }, true)\n    ) {\n      lockingPeriods.current.setCustomValidity(ERR_INVALID_LOCKING_PERIODS);\n      errors.push(ERR_INVALID_LOCKING_PERIODS);\n    } else {\n      lockingPeriods.current.setCustomValidity('');\n    }\n    return errors;\n  };\n\n  return (\n    <div>\n      <h5>{title}</h5>\n      {(register || (pool && username)) && (\n        <div className=\"NoteField\">\n          <b>Pool admin's user name</b>\n          {register && !username && (\n            <>\n              <br />A BNS name that is used to protect pool's data. Only the owner of this name can\n              update the data. The name must contain exactly 1 dot. e.g. alice.id. Subdomain names\n              are not supported by the UI.\n              <br />\n              The name is registered and paid for during the `register` function call if not yet\n              owned by the caller. (Costs around 0.1 STX for friedgerpool.id)\n              <br />\n              After successful registration of the name, add the name to your website's\n              manifest.json file as \"author\".\n            </>\n          )}\n          <input\n            type=\"text\"\n            ref={name}\n            className=\"form-control\"\n            defaultValue={username}\n            readOnly={!register || username}\n            placeholder=\"Name, e.g. alice.id\"\n            onKeyUp={e => {\n              if (e.key === 'Enter') delegateeAddress.current.focus();\n            }}\n            onBlur={e => {\n              validateForm();\n            }}\n          />\n          {register && (\n            <div className=\"input-group-append\" style={{ alignItems: 'center' }}>\n              <button className=\"btn btn-outline-secondary\" type=\"button\" onClick={checkPrice}>\n                <div\n                  ref={spinner}\n                  role=\"status\"\n                  className=\"d-none spinner-border spinner-border-sm text-info align-text-top mr-2\"\n                />\n                Check price\n              </button>\n              <div className=\"pl-4\" ref={priceInfo}></div>\n            </div>\n          )}\n          <br />\n          <b>Delegatee address</b>\n          <br />\n          Pool's Stacks address for delegation\n          <input\n            type=\"text\"\n            ref={delegateeAddress}\n            className=\"form-control\"\n            defaultValue={register ? ownerStxAddress : cvToString(pool.data['delegatee'])}\n            placeholder=\"Stacks address\"\n            onKeyUp={e => {\n              if (e.key === 'Enter') url.current.focus();\n            }}\n            required\n            onBlur={e => {\n              validateForm();\n            }}\n          />\n          <br />\n          <b>Pool's Website</b>\n          <input\n            type=\"text\"\n            ref={url}\n            className=\"form-control\"\n            defaultValue={register ? '' : pool.data['url'].data}\n            placeholder=\"Url\"\n            required\n            onKeyUp={e => {\n              if (e.key === 'Enter') rewardBtcAddresses.current.focus();\n            }}\n            onBlur={e => {\n              validateForm();\n            }}\n          />\n          <br />\n          <b>Reward BTC addresses</b>\n          <br />\n          One or more BTC addresses, comma separated list\n          <input\n            type=\"text\"\n            ref={rewardBtcAddresses}\n            className=\"form-control\"\n            defaultValue={\n              register\n                ? btcAddressFromOwnerStxAddress\n                : pool.data['pox-address'].list.map(cv => poxCVToBtcAddress(cv)).join(',')\n            }\n            placeholder=\"Pool's reward BTC address\"\n            onKeyUp={e => {\n              if (e.key === 'Enter') contract.current.focus();\n            }}\n            onBlur={e => {\n              validateForm();\n            }}\n          />\n          <br />\n          <b>Contract ID</b>\n          <br />\n          This could be the genesis pox contract or a custom pool contract.\n          <input\n            type=\"text\"\n            ref={contract}\n            className=\"form-control\"\n            defaultValue={\n              register\n                ? `${GENESIS_CONTRACT_ADDRESS}.pox`\n                : pool.data['contract'].type === ClarityType.OptionalSome\n                ? cvToString(pool.data['contract'].value)\n                : cvToString(pool.data['contract-ext'].value)\n            }\n            placeholder=\"Pool's Contract ID\"\n            onKeyUp={e => {\n              if (e.key === 'Enter') minimum.current.focus();\n            }}\n            onBlur={e => {\n              validateForm();\n            }}\n          />\n          <br />\n          <b>Minimum STX</b> required to join\n          <input\n            type=\"number\"\n            ref={minimum}\n            step=\"any\"\n            min=\"0\"\n            className=\"form-control\"\n            defaultValue={\n              register\n                ? undefined\n                : pool.data['minimum-ustx'].type === ClarityType.OptionalSome\n                ? pool.data['minimum-ustx'].value.value / 1000000n\n                : undefined\n            }\n            placeholder=\"Minimum STX required for joining\"\n            onKeyUp={e => {\n              if (e.key === 'Enter') lockingPeriods.current.focus();\n            }}\n            onBlur={e => {\n              validateForm();\n            }}\n          />\n          <br />\n          <b>Locking period</b>\n          <br />\n          Number of locking cycles (comma separated list of cycles; between 1 and 12). <br />\n          <del>Leave empty if variable.</del> At least one entry required due to{' '}\n          <a href=\"https://github.com/blockstack/stacks-wallet-web/issues/1111\">#1111</a>.\n          <input\n            type=\"text\"\n            ref={lockingPeriods}\n            className=\"form-control\"\n            placeholder=\"e.g. 1, 12\"\n            defaultValue={\n              register\n                ? undefined\n                : pool.data['locking-period'].list.map(cv => cv.value.toString(10)).join(',')\n            }\n            onKeyUp={e => {\n              if (e.key === 'Enter') payout.current.focus();\n            }}\n            onBlur={e => {\n              validateForm();\n            }}\n          />\n          <br />\n          <b>Pool payouts</b> <br />\n          Currency of pool payouts\n          <select\n            type=\"text\"\n            ref={payout}\n            className=\"form-control\"\n            defaultValue={register ? 'BTC' : pool.data['payout'].data}\n            placeholder=\"e.g. BTC, STX, WMNO\"\n            onKeyUp={e => {\n              if (e.key === 'Enter') dateOfPayout.current.focus();\n            }}\n            onBlur={e => {\n              validateForm();\n            }}\n          >\n            <option value=\"BTC\">BTC</option>\n            <option value=\"STX\">STX</option>\n          </select>\n          <br />\n          <b>Date of Payout</b>\n          <br />\n          When the Pool payouts rewards (optional, max 80 char.)\n          <input\n            type=\"text\"\n            ref={dateOfPayout}\n            className=\"form-control\"\n            defaultValue={register ? '' : pool.data['date-of-payout'].data}\n            placeholder=\"e.g. end of cycle, instant\"\n            maxLength=\"80\"\n            onKeyUp={e => {\n              if (e.key === 'Enter') fees.current.focus();\n            }}\n            onBlur={e => {\n              validateForm();\n            }}\n          />\n          <br />\n          <b>Fees</b>\n          <br />\n          What are the fees (optional, max 80 char.)\n          <input\n            type=\"text\"\n            ref={fees}\n            className=\"form-control\"\n            defaultValue={register ? '' : pool.data['fees'].data}\n            placeholder=\"e.g. 10%, 5 STX\"\n            maxLength=\"80\"\n            onKeyUp={e => {\n              if (e.key === 'Enter') poolStatus.current.focus();\n            }}\n            onBlur={e => {\n              validateForm();\n            }}\n          />\n          <br />\n          <b>Status</b>\n          <br />\n          One of \"In development\", \"In production\", \"Open to join\", \"Closed for next cycle\",\n          \"Retired\"\n          <select\n            ref={poolStatus}\n            className=\"form-control\"\n            defaultValue={register ? '0' : pool.data['status'].value}\n            onKeyUp={e => {\n              if (e.key === 'Enter') formAction();\n            }}\n            onBlur={e => {\n              validateForm();\n            }}\n          >\n            <option value=\"0\">In development (0)</option>\n            <option value=\"1\">In production (1)</option>\n            <option value=\"11\">Open to join for next cycle (11)</option>\n            <option value=\"21\">Closed for next cycle (21)</option>\n            <option value=\"99\">Retired (99)</option>\n          </select>\n          <br />\n          <div className=\"input-group-append\">\n            <button className=\"btn btn-outline-secondary\" type=\"button\" onClick={formAction}>\n              <div\n                ref={spinner}\n                role=\"status\"\n                className=\"d-none spinner-border spinner-border-sm text-info align-text-top mr-2\"\n              />\n              {formButtonLabel}\n            </button>\n          </div>\n        </div>\n      )}\n      {!register && !pool && <>Loading pool data...</>}\n      <div>\n        <TxStatus txId={txId} resultPrefix=\"Order placed in block \" />\n      </div>\n      {status && (\n        <>\n          <div>{status}</div>\n        </>\n      )}\n    </div>\n  );\n}\n","import React from 'react';\nimport { PoolForm } from '../components/PoolForm';\nimport { useStxAddresses } from '../lib/hooks';\n\nexport default function MyProfileRegister({ userSession }) {\n  console.log(userSession);\n  const { ownerStxAddress } = useStxAddresses(userSession);\n\n  return (\n    <main className=\"panel-welcome mt-5 container\">\n      <div className=\"row\">\n        <div className=\"mx-auto col-sm-10 col-md-8 px-4\">\n          <PoolForm register ownerStxAddress={ownerStxAddress} />\n        </div>\n      </div>\n    </main>\n  );\n}\n","import React from 'react';\nimport { useStxAddresses } from '../lib/hooks';\nimport { PoolForm } from '../components/PoolForm';\n\nexport default function MyProfileEdit({ userSession, poolId }) {\n  console.log({ userSession, poolId });\n  const { ownerStxAddress } = useStxAddresses(userSession);\n\n  return (\n    <main className=\"panel-welcome mt-5 container\">\n      <div className=\"row\">\n        <div className=\"mx-auto col-sm-10 col-md-8 px-4\">\n          <PoolForm ownerStxAddress={ownerStxAddress} poolId={poolId} />\n        </div>\n      </div>\n    </main>\n  );\n}\n","import React from 'react';\nimport { useStxAddresses } from '../lib/hooks';\nimport { PoolJoinSimple } from '../components/PoolJoinSimple';\n\nexport default function PoolDetailsSimple({ delegatee, location, userSession }) {\n  const { ownerStxAddress } = useStxAddresses(userSession);\n\n  return (\n    <main className=\"panel-welcome mt-5 container\">\n      <div className=\"lead row mt-5\">\n        <div className=\"col-xs-10 col-md-8 mx-auto px-4\">\n          <h1 className=\"card-title\">Join Pool</h1>\n        </div>\n\n        <div className=\"col-xs-10 col-md-8 mx-auto mb-4 px-4\">\n          <PoolJoinSimple\n            delegatee={delegatee}\n            ownerStxAddress={ownerStxAddress}\n            userSession={userSession}\n          />\n        </div>\n\n        <div className=\"card col-md-8 mx-auto mt-5 mb-5 text-center px-0 border-warning\">\n          <div className=\"card-header\">\n            <h5 className=\"card-title\">Instructions</h5>\n          </div>\n          <ul className=\"list-group list-group-flush\">\n            <li className=\"list-group-item\">\n              If you have not yet locked any Stacks tokens and if you haven't joined a pool yet,\n              join now.\n            </li>\n            <li className=\"list-group-item\">\n              Enter the amount, duration, and reward address to define how you would like to stack\n              and click delegate.\n            </li>\n            <li className=\"list-group-item\">\n              Wait for the pool admin to do the necessary and collect your rewards.\n            </li>\n          </ul>\n        </div>\n      </div>\n    </main>\n  );\n}\n","import { StacksMainnet } from '@stacks/network';\nimport { broadcastTransaction, makeSTXTokenTransfer } from '@stacks/transactions';\nimport React, { useState } from 'react';\nimport Profile from '../components/Profile';\nimport { fetchAccount } from '../lib/account';\nimport { useStxAddresses } from '../lib/hooks';\nimport BN from 'bn.js';\nimport { StxProfile } from '../components/StxProfile';\n\nexport default function MyProfile({ userSession }) {\n  const { ownerStxAddress, appStxAddress, appPrivateKey } = useStxAddresses(userSession);\n  const [status, setStatus] = useState();\n  const [preview, setPreview] = useState(true);\n\n  const transferToOwnerAddress = async () => {\n    setStatus('Checking balances..');\n    const stxBalance = await fetchAccount(appStxAddress);\n    if (stxBalance.balance === '0') {\n      setStatus('Amount is 0');\n      return;\n    }\n    const network = new StacksMainnet();\n    const fee = 100000;\n    const tx = await makeSTXTokenTransfer({\n      amount: new BN(stxBalance.balance - fee),\n      recipient: ownerStxAddress,\n      network,\n      fee: new BN(fee),\n      senderKey: appPrivateKey,\n    });\n    if (preview) {\n      setStatus(\n        `Transfer ${stxBalance.balance} from ${appStxAddress} to ${ownerStxAddress}. Using ${\n          fee / 1000000.0\n        } STX as transaction fees.`\n      );\n      setPreview(false);\n    } else {\n      const txId = await broadcastTransaction(tx, network);\n      setStatus('Transfer has been submitted ' + txId);\n    }\n  };\n\n  return (\n    <main className=\"panel-welcome mt-5 container\">\n      <div className=\"row\">\n        <div className=\"mx-auto col-sm-10 col-md-8 px-4\">\n          <Profile\n            stxAddresses={{\n              appStxAddress: appStxAddress,\n              ownerStxAddress: ownerStxAddress,\n            }}\n            userSession={userSession}\n          />\n          <div className=\"pt-4\">\n            Your STX hold address for this pool app:\n            <br />\n            <StxProfile stxAddress={appStxAddress} showAddress updateStatus={setStatus}></StxProfile>\n          </div>\n          <hr />\n          <div>Transfer from Hodl account address to Stx account address</div>\n          <button className=\"btn btn-outline-secondary mt-1\" onClick={transferToOwnerAddress}>\n            {preview ? 'Preview' : 'Transfer'}\n          </button>\n          <div>{status}</div>\n        </div>\n      </div>\n    </main>\n  );\n}\n","import React, { useEffect } from 'react';\nimport Landing from './pages/Landing';\nimport Overview from './pages/Overview';\nimport { Connect } from '@stacks/connect-react';\nimport { Link, Router } from '@reach/router';\nimport { NETWORK } from './lib/constants';\nimport Auth from './components/Auth';\nimport { userDataState, userSessionState, useConnect } from './lib/auth';\nimport { useAtom } from 'jotai';\nimport PoolRegistry from './pages/PoolRegistry';\nimport PoolDetails from './pages/PoolDetails';\nimport MyProfile from './pages/MyProfile';\nimport MyProfileRegister from './pages/MyProfileRegister';\nimport MyProfileEdit from './pages/MyProfileEdit';\nimport PoolDetailsSimple from './pages/PoolDetailsSimple';\nimport MyProfileHodl from \"./pages/MyProfileHodl\"\n\nexport default function App(props) {\n  const { authOptions } = useConnect();\n  const [userSession] = useAtom(userSessionState);\n  const [, setUserData] = useAtom(userDataState);\n  useEffect(() => {\n    if (userSession?.isUserSignedIn()) {\n      setUserData(userSession.loadUserData());\n    } else if (userSession.isSignInPending()) {\n      userSession.handlePendingSignIn();\n    }\n  }, [userSession, setUserData]);\n\n  return (\n    <Connect authOptions={authOptions}>\n      <nav className=\"navbar sticky-top navbar-dark bg-dark text-light\">\n        <a className=\"navbar-brand\" href=\"/\">\n          <img src=\"/mainnet.png\" alt=\"Logo\" />\n        </a>\n        <Auth className=\"ml-auto\" userSession={userSession} />\n      </nav>\n\n      <Content userSession={userSession} />\n    </Connect>\n  );\n}\n\nconst NavLink = props => {\n  return (\n    <Link\n      {...props}\n      getProps={({ isCurrent }) => {\n        // the object returned here is passed to the\n        // anchor element's props\n        if (isCurrent) {\n          return {\n            className: 'nav-item nav-link px-4 active',\n          };\n        } else {\n          return { className: 'nav-item nav-link px-4' };\n        }\n      }}\n    />\n  );\n};\n\nfunction AppBody(props) {\n  return (\n    <div>\n      <nav className=\"navbar navbar-expand-md nav-pills nav-justified mx-auto\">\n        <NavLink to=\"/\">Overview</NavLink>\n        <NavLink to=\"/pools\">Pools</NavLink>\n        <NavLink to=\"/me\">Profile</NavLink>\n      </nav>\n      {props.children}\n      <div>{NETWORK.coreApiUrl}</div>\n    </div>\n  );\n}\nfunction Content({ userSession }) {\n  const authenticated = userSession && userSession.isUserSignedIn();\n  const decentralizedID =\n    userSession && userSession.isUserSignedIn() && userSession.loadUserData().decentralizedID;\n  return (\n    <>\n      {!authenticated && <Landing />}\n      {decentralizedID && (\n        <>\n          <Router>\n            <AppBody path=\"/\">\n              <Overview path=\"/\" decentralizedID={decentralizedID} />\n\n              <PoolRegistry\n                path=\"/pools\"\n                decentralizedID={decentralizedID}\n                userSession={userSession}\n              />\n              <PoolDetails\n                path=\"/pools/:poolId\"\n                decentralizedID={decentralizedID}\n                userSession={userSession}\n              />\n              <MyProfile path=\"/me\" decentralizedID={decentralizedID} userSession={userSession} />\n              <MyProfileRegister\n                path=\"/me/register\"\n                decentralizedID={decentralizedID}\n                userSession={userSession}\n              />\n              <MyProfileEdit\n                path=\"/me/edit/:poolId\"\n                decentralizedID={decentralizedID}\n                userSession={userSession}\n              />\n              <PoolDetailsSimple\n                path=\"/join/:delegatee\"\n                decentralizedID={decentralizedID}\n                userSession={userSession}\n              />\n              <MyProfileHodl path=\"/hodl\"\n              decentralizedID={decentralizedID}\n              userSession={userSession}/>\n            </AppBody>\n          </Router>\n        </>\n      )}\n    </>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App.js';\n// Require Sass file so webpack can build it\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './styles/style.css';\n\nReactDOM.render(<App />, document.getElementById('App'));\n"],"sourceRoot":""}