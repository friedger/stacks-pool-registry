{"version":3,"sources":["lib/constants.js","components/PoXRevoke.js","components/Amount.js","lib/pools.js","components/PoolJoin.js","components/PoolJoinSimple.js","lib/account.js","lib/pools-utils.js","../node_modules/@stacks/connect-ui/dist/esm lazy /^/.//.*/.entry/.js$/ include: //.entry/.js$/ exclude: //.system/.entry/.js$/ groupOptions: {} namespace object","lib/auth.js","pages/Landing.js","pages/Overview.js","components/Auth.js","lib/hooks.js","components/Pool.js","components/PoolList.js","pages/PoolRegistry.js","pages/PoolDetails.js","components/StxProfile.js","components/Profile.js","pages/MyProfile.js","components/PoolForm.js","pages/MyProfileRegister.js","pages/MyProfileEdit.js","pages/PoolDetailsSimple.js","pages/MyProfileHodl.js","App.js","index.js","components/PoolInfo.js","lib/transactions.js"],"names":["CONTRACT_ADDRESS","POOL_REGISTRY_CONTRACT_NAME","GENESIS_CONTRACT_ADDRESS","BNS_CONTRACT_NAME","authOrigin","STACK_API_URL","STACKS_API_WS_URL","STACKS_API_ACCOUNTS_URL","NETWORK","StacksMainnet","url","basePath","config","Configuration","accountsApi","AccountsApi","smartContractsApi","SmartContractsApi","transactionsApi","TransactionsApi","InfoApi","PoXRevoke","userSession","setStatus","setTxId","loading","setLoading","useState","doContractCall","useStacksJsConnect","className","type","onClick","async","functionArgs","contractAddress","contractName","functionName","postConditionMode","PostConditionMode","Deny","postConditions","network","onFinish","data","console","log","undefined","txId","e","toString","role","Amount","ustx","isNaN","toLocaleString","style","minimumFractionDigits","maximumFractionDigits","fetchPool","poolId","receipt","callReadOnlyFunction","uintCV","senderAddress","ClarityType","OptionalNone","value","fetchPools","verify","offset","idsCV","Array","keys","map","i","listCV","Promise","all","list","cv","index","poolCV","verified","verifyUrl","usernameCVToName","name","trueCV","falseCV","reduce","result","push","nameToUsernameCV","fullQualifiedName","parts","split","length","namespace","tupleCV","bufferCVFromString","usernameCV","buffer","whiteListedUrls","username","whiteListedUsername","fetch","manifest","json","author","whiteListedContracts","findTraitIndex","ctrAddress","ctrName","verifyContractTrait","registerFunctions","updateFunctions","getPoolContractId","pool","contractCV","contract","OptionalSome","ext","cvToString","traitName","path","isImplemented","status","is_implemented","getPayoutAddressCV","payout","address","poxAddrCVFromBitcoin","poxAddrCV","hashbytes","bufferCV","Buffer","from","version","PoolJoin","ownerStxAddress","amount","useRef","duration","payoutAddress","lockingPeriod","spinner","useEffect","fetchAccount","catch","then","acc","a","getAccountBalance","principal","balance","stxBalance","parseInt","stx","locked","current","isSimple","delegatee","delegateeCV","standardPrincipalCV","contractPrincipalCV","rewardBtcAddressCV","noneCV","getPayout","userPayoutAddress","stxAddress","c32","getPayoutAddress","poolData","joinAction","classList","remove","amountCV","trim","durationCV","someCV","payoutAddressCV","lockingPeriodCV","finished","add","step","min","ref","placeholder","onKeyUp","key","focus","onBlur","disabled","readOnly","List","defaultValue","lp","join","resultPrefix","PoolJoinSimple","stackingStatus","setStackingStatus","delegationState","setDelegationState","suggestedAmount","setSuggestedAmount","progress1","setProgress1","progress2","setProgress2","progress3","setProgress3","progress4","setProgress4","Math","StackingClient","getStatus","s","getContractDataMapEntry","mapName","cvToHex","stacker","mapEntry","hexToCV","state","progress","class","width","aria-valuenow","aria-valuemin","aria-valuemax","stacked","details","amount_microstx","first_reward_cycle","lock_period","getStacksAccount","appPrivateKey","privateKey","createStacksPrivateKey","publicKey","getPublicKey","addressFromPublicKeys","AddressVersion","MainnetSingleSig","AddressHashMode","SerializeP2PKH","addressAsString","response","reject","getUsername","nameResult","readOnlyFunctionArgs","sender","arguments","okay","resultCV","ResponseOk","code","decodeBtcAddress","btcAddress","hashMode","startsWith","fromBech32","SerializeP2WSH","SerializeP2WPKH","fromBase58Check","SerializeP2SH","Error","getAddressHashMode","hash","decodeStxAddress","poxCVToBtcAddress","toBase58Check","mainnet","addressHashModeToBtcVersion","valueOf","webpackAsyncContext","req","__webpack_require__","o","resolve","ids","id","Object","module","exports","appConfig","AppConfig","userSessionState","atom","UserSession","userDataState","authResponseState","useConnect","useAtom","setUserData","useUpdateAtom","setAuthResponse","authOptions","payload","authResponse","userData","loadUserData","redirectTo","manifestPath","appDetails","icon","handleOpenAuth","showConnect","handleSignOut","useCallback","signUserOut","Landing","props","href","target","rel","Overview","Auth","isUserSignedIn","useStxAddresses","setOwnerStxAddress","appStxAddress","setAppStxAddress","setAppPrivateKey","getUserData","addressToString","profile","hasJoined","userInfo","delegation","delegatedTo","isStacking","stacking","poxAddr","Pool","navigate","useNavigate","PoolInfo","canJoin","PoolList","search","verifyUsername","pools","setPools","filteredPools","filter","findIndex","item","fees","indexOf","addr","PoolRegistry","payoutRef","lockingPeriodRef","searchRef","setPayout","setLockingPeriod","setSearch","onChange","PoolDetails","location","setPoolData","p","fn","StxProfile","updateStatus","showAddress","account","profileState","setProfileState","onRefreshBalance","toFixed","Profile","stxAddresses","nameCV","setNameCV","person","Person","src","avatarUrl","replace","alt","setTimeout","isPoolOwned","MyProfile","ERR_NAME","ERR_URL","ERR_REWARD_ADDRESS_1","ERR_INVALID_REWARD_ADDRESSES","ERR_INVALID_CONTRACT_ID","ERR_LOCKING_PERIOD_1","ERR_INVALID_LOCKING_PERIODS","ERR_INVALID_STX_ADDRESS","PoolForm","formButtonLabel","register","title","priceInfo","delegateeAddress","rewardBtcAddresses","minimum","lockingPeriods","dateOfPayout","poolStatus","setUsername","setPool","price","setPrice","btcAddressFromOwnerStxAddress","formAction","errors","validateForm","poolCtrAddress","poolCtrName","traitIndex","priceBN","BN","checkPrice","checkUrl","stxPostCondition","makeStandardSTXPostCondition","FungibleConditionCode","Equal","delegateeParts","poxAddressesCV","urlCV","stringAsciiCV","minimumUstxCV","lockingPeriodsCV","payoutCV","dateOfPayoutCV","feesCV","statusCV","poxAddressCV","requestedName","priceResult","priceUstx","innerHTML","setCustomValidity","addrList","ctrAddr","lockingPeriodList","period","alignItems","required","maxLength","MyProfileRegister","MyProfileEdit","PoolDetailsSimple","preview","setPreview","transferToOwnerAddress","fee","makeSTXTokenTransfer","recipient","senderKey","tx","broadcastTransaction","App","isSignInPending","handlePendingSignIn","Content","NavLink","getProps","isCurrent","AppBody","to","children","coreApiUrl","authenticated","decentralizedID","ReactDOM","render","document","getElementById","u","contractId","BoolTrue","TxStatus","processingResult","setProcessingResult","sub","update","client","connectWebSocketClient","subscribeTxUpdates","subscribe","event","tx_status","getTransactionById","tx_result","unsubscribe","normalizedTxId","repr"],"mappings":"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","file":"static/js/main.2860a79f.chunk.js","sourcesContent":["import {\n  TransactionsApi,\n  SmartContractsApi,\n  AccountsApi,\n  Configuration,\n  InfoApi,\n} from '@stacks/blockchain-api-client';\nimport { StacksMainnet } from '@stacks/network';\n\nexport const CONTRACT_ADDRESS = 'SP1K1A1PMGW2ZJCNF46NWZWHG8TS1D23EGH1KNK60';\nexport const POOL_REGISTRY_CONTRACT_NAME = 'pool-registry-v1';\nexport const GENESIS_CONTRACT_ADDRESS = 'SP000000000000000000002Q6VF78';\nexport const BNS_CONTRACT_NAME = 'bns';\n\nexport const authOrigin = 'https://app.blockstack.org';\n\nexport const STACK_API_URL = 'https://stacks-node-api.mainnet.stacks.co';\nexport const STACKS_API_WS_URL = 'ws://stacks-node-api.mainnet.stacks.co/';\nexport const STACKS_API_ACCOUNTS_URL = `${STACK_API_URL}/v2/accounts`;\n\nexport const NETWORK = new StacksMainnet({\n  url:STACK_API_URL\n});\n\nconst basePath = STACK_API_URL;\nconst config = new Configuration({ basePath });\nexport const accountsApi = new AccountsApi(config);\nexport const smartContractsApi = new SmartContractsApi(config);\nexport const transactionsApi = new TransactionsApi(config);\nexport const infoApi = new InfoApi(config);\n","import { useState } from 'react';\nimport { useConnect as useStacksJsConnect } from '@stacks/connect-react';\nimport { NETWORK } from '../lib/constants';\nimport { PostConditionMode } from '@stacks/transactions';\n\n\nexport function PoXRevoke({ userSession, setStatus, setTxId }) {\n  const [loading, setLoading] = useState();\n  const { doContractCall } = useStacksJsConnect();\n\n  const revokeAction = async () => {\n    setLoading(true);\n    try {\n      setStatus(`Sending transaction`);\n      const functionArgs = [];\n      await doContractCall({\n        contractAddress: \"SP000000000000000000002Q6VF78\",\n        contractName: \"pox\",\n        functionName: 'revoke-delegate-stx',\n        functionArgs,\n        postConditionMode: PostConditionMode.Deny,\n        postConditions: [],\n        userSession,\n        network: NETWORK,\n        onFinish: data => {\n          console.log(data);\n          setStatus(undefined);\n          setTxId(data.txId);\n          setLoading(false);\n        },\n      });\n    } catch (e) {\n      console.log(e);\n      setStatus(e.toString());\n      setLoading(false);\n    }\n  };\n\n  return (\n    <button className=\"btn btn-outline-secondary\" type=\"button\" onClick={revokeAction}>\n      <div\n        role=\"status\"\n        className={`${\n          loading ? '' : 'd-none'\n        } spinner-border spinner-border-sm text-info align-text-top mr-2`}\n      />\n      Cancel pool membership\n    </button>\n  );\n}\n","export function Amount({ ustx, className }) {\n  if (isNaN(ustx)) {\n    return ustx;\n  }\n  return (\n    <span className={className}>\n      {(ustx / 1000000).toLocaleString(undefined, {\n        style: 'decimal',\n        minimumFractionDigits: 0,\n        maximumFractionDigits: 0,\n      })}\n      Ӿ\n    </span>\n  );\n}\n","import {\n  bufferCVFromString,\n  callReadOnlyFunction,\n  ClarityType,\n  cvToString,\n  falseCV,\n  listCV,\n  trueCV,\n  tupleCV,\n  uintCV,\n} from '@stacks/transactions';\nimport {\n  CONTRACT_ADDRESS,\n  GENESIS_CONTRACT_ADDRESS,\n  NETWORK,\n  POOL_REGISTRY_CONTRACT_NAME,\n  STACK_API_URL,\n} from './constants';\n\nconst contractAddress = CONTRACT_ADDRESS;\nconst contractName = POOL_REGISTRY_CONTRACT_NAME;\n\nexport async function fetchPool(poolId) {\n  const receipt = await callReadOnlyFunction({\n    contractAddress,\n    contractName,\n    functionName: 'get-pool',\n    functionArgs: [uintCV(poolId)],\n    network: NETWORK,\n    senderAddress: contractAddress,\n  });\n  console.log(receipt);\n  if (receipt.type === ClarityType.OptionalNone) {\n    return undefined;\n  } else {\n    return receipt.value;\n  }\n}\n\nexport async function fetchPools({ verify = false, offset = 0 }) {\n  console.log({ verify, offset });\n  const idsCV = [...Array(10).keys()].map(i => uintCV(i + 1 + offset));\n  const receipt = await callReadOnlyFunction({\n    contractAddress,\n    contractName,\n    functionName: 'get-pools',\n    functionArgs: [listCV(idsCV)],\n    network: NETWORK,\n    senderAddress: contractAddress,\n  });\n\n  const verifiedPools = await Promise.all(\n    receipt.list.map(async (cv, index) => {\n      if (cv.type === ClarityType.OptionalNone) {\n        return cv;\n      } else {\n        const poolCV = cv.value;\n        poolCV.data['pool-id'] = idsCV[index];\n        if (verify) {\n          const verified = await verifyUrl(\n            poolCV.data.url.data,\n            usernameCVToName(poolCV.data.name)\n          );\n          poolCV.data['verified'] = verified ? trueCV() : falseCV();\n          return poolCV;\n        } else {\n          return poolCV;\n        }\n      }\n    })\n  );\n\n  return verifiedPools.reduce((result, cv) => {\n    if (cv.type === ClarityType.OptionalNone) {\n      return result;\n    } else {\n      result.push(cv);\n      return result;\n    }\n  }, []);\n}\n\nexport function nameToUsernameCV(fullQualifiedName) {\n  const parts = fullQualifiedName.split('.');\n  if ((parts.length = 2)) {\n    const [name, namespace] = parts;\n    console.log(parts);\n    return tupleCV({ name: bufferCVFromString(name), namespace: bufferCVFromString(namespace) });\n  } else {\n    return undefined;\n  }\n}\n\nexport function usernameCVToName(usernameCV) {\n  return `${usernameCV.data.name.buffer.toString()}.${usernameCV.data.namespace.buffer.toString()}`;\n}\n\nconst whiteListedUrls = {\n  'https://pool.friedger.de': 'friedgerpool.id',\n  'https://planbetter.org': 'planbetter.btc',\n  'www.secretlabs.com': 'xversepool.id',\n};\n\nexport async function verifyUrl(url, username) {\n  const whiteListedUsername = whiteListedUrls[url];\n  if (whiteListedUsername) {\n    return whiteListedUsername === username;\n  } else {\n    try {\n      const result = await fetch(url + '/manifest.json');\n      const manifest = await result.json();\n      console.log({ manifest, username }, manifest.author === username);\n      if (manifest.author) {\n        whiteListedUrls[url] = manifest.author;\n      }\n      return manifest.author === username;\n    } catch (e) {\n      console.log(e);\n      return false;\n    }\n  }\n}\n\nconst whiteListedContracts = {};\nwhiteListedContracts[\n  `${GENESIS_CONTRACT_ADDRESS}/pox/${CONTRACT_ADDRESS}/${POOL_REGISTRY_CONTRACT_NAME}/pool-trait`\n] = true;\n\nexport async function findTraitIndex(ctrAddress, ctrName) {\n  if (await verifyContractTrait(ctrAddress, ctrName, 'pool-trait')) {\n    return 0;\n  } else if (await verifyContractTrait(ctrAddress, ctrName, 'pool-trait-ext')) {\n    return 1;\n  } else if (await verifyContractTrait(ctrAddress, ctrName, 'pool-trait-ext2')) {\n    return 2;\n  } else {\n    return -1;\n  }\n}\n\nexport const registerFunctions = ['register', 'register-ext', 'register-ext2'];\nexport const updateFunctions = ['update', 'update-ext', 'update-ext2'];\n\nexport function getPoolContractId(pool) {\n  const contractCV =\n    pool.data.contract.type === ClarityType.OptionalSome\n      ? pool.data.contract.value\n      : pool.data.contract.ext && pool.data.contract.ext.type === ClarityType.OptionalSome\n      ? pool.data['extended-contract']\n      : pool.data['extended2-contract'];\n  return cvToString(contractCV);\n}\n\nasync function verifyContractTrait(ctrAddress, ctrName, traitName) {\n  const path = `${ctrAddress}/${ctrName}/${CONTRACT_ADDRESS}/${POOL_REGISTRY_CONTRACT_NAME}/${traitName}`;\n\n  console.log({ path });\n  if (path in whiteListedContracts) {\n    return whiteListedContracts[path];\n  } else {\n    let isImplemented;\n    const result = await fetch(`${STACK_API_URL}/v2/traits/${path}`);\n    console.log({ result });\n    if (result.status === 404) {\n      isImplemented = false;\n    } else {\n      isImplemented = (await result.json()).is_implemented;\n    }\n    whiteListedContracts.path = isImplemented;\n    return isImplemented;\n  }\n}\n","import React, { useRef, useState, useEffect } from 'react';\n\nimport { accountsApi, NETWORK } from '../lib/constants';\nimport { TxStatus } from '../lib/transactions';\nimport { fetchAccount } from '../lib/account';\nimport { useConnect as useStacksJsConnect } from '@stacks/connect-react';\nimport {\n  bufferCV,\n  ClarityType,\n  contractPrincipalCV,\n  cvToString,\n  noneCV,\n  PostConditionMode,\n  someCV,\n  standardPrincipalCV,\n  tupleCV,\n  uintCV,\n} from '@stacks/transactions';\nimport * as c32 from 'c32check';\nimport { poxAddrCV, poxAddrCVFromBitcoin } from '../lib/pools-utils';\nimport PoolInfo from './PoolInfo';\nimport { getPoolContractId } from '../lib/pools';\n\nfunction getPayout(pool) {\n  switch (pool.data.payout.data) {\n    case 'BTC':\n      return 'BTC';\n    case 'STX':\n      return 'STX';\n    default:\n      return undefined;\n  }\n}\n\nfunction getPayoutAddress(payout, stxAddress) {\n  console.log({ payout, stxAddress });\n  if (!stxAddress) return undefined;\n  switch (payout) {\n    case 'BTC':\n      return c32.c32ToB58(stxAddress);\n    case 'STX':\n      return stxAddress;\n    default:\n      return stxAddress;\n  }\n}\n\nfunction getPayoutAddressCV(payout, address) {\n  switch (payout) {\n    case 'BTC':\n      return poxAddrCVFromBitcoin(address);\n    case 'STX':\n      return poxAddrCV(address);\n    default:\n      return tupleCV({\n        hashbytes: bufferCV(Buffer.from([0])),\n        version: bufferCV(Buffer.from([0])),\n      });\n  }\n}\n\nexport function PoolJoin({ pool, ownerStxAddress, userSession }) {\n  console.log(pool);\n  console.log({ ownerStxAddress, userSession });\n  const { doContractCall } = useStacksJsConnect();\n  const amount = useRef();\n  const duration = useRef();\n  const payoutAddress = useRef();\n  const lockingPeriod = useRef();\n\n  const spinner = useRef();\n  const [status, setStatus] = useState();\n  const [txId, setTxId] = useState();\n  const [stxBalance, setStxBalance] = useState();\n\n  useEffect(() => {\n    if (ownerStxAddress) {\n      fetchAccount(ownerStxAddress)\n        .catch(e => {\n          setStatus('Failed to access your account', e);\n          console.log(e);\n        })\n        .then(async acc => {\n          setStatus(undefined);\n          console.log({ acc });\n        });\n      accountsApi.getAccountBalance({ principal: ownerStxAddress }).then(balance => {\n        const stxBalance = (parseInt(balance.stx.balance) - parseInt(balance.stx.locked)) / 1000000;\n        if (amount.current) {\n          amount.current.value = stxBalance;\n        }\n      });\n    }\n  }, [ownerStxAddress]);\n\n  const isSimple = pool.data.contract.type === ClarityType.OptionalSome;\n  const isExt = pool.data['extended-contract'].type === ClarityType.OptionalSome;\n  const isExt2 = pool.data['extended2-contract'].type === ClarityType.OptionalSome;\n  const contractId = getPoolContractId(pool);\n  const [contractAddress, contractName] = contractId.split('.');\n  const delegatee = cvToString(pool.data.delegatee);\n  const parts = delegatee.split('.');\n  const delegateeCV =\n    parts.length < 2 ? standardPrincipalCV(parts[0]) : contractPrincipalCV(parts[0], parts[1]);\n  const useFirstPoolAddress = false;\n  const rewardBtcAddressCV = useFirstPoolAddress ? someCV(pool.data['pox-address'][0]) : noneCV();\n  const payout = getPayout(pool);\n  const userPayoutAddress = getPayoutAddress(payout, ownerStxAddress);\n\n  console.log({ poolData: pool.data });\n\n  const joinAction = async () => {\n    spinner.current.classList.remove('d-none');\n\n    const amountCV = uintCV(amount.current.value.trim() * 1000000); // convert to uSTX\n    const durationCV = duration.current.value.trim()\n      ? someCV(uintCV(duration.current.value.trim()))\n      : noneCV();\n    const payoutAddressCV = getPayoutAddressCV(payout, payoutAddress.current.value.trim());\n    const lockingPeriodCV = uintCV(lockingPeriod.current.value.trim());\n    try {\n      setStatus(`Sending transaction`);\n      const functionArgs = isSimple\n        ? [amountCV, delegateeCV, durationCV, rewardBtcAddressCV]\n        : [amountCV, delegateeCV, durationCV, rewardBtcAddressCV, payoutAddressCV, lockingPeriodCV];\n      console.log({ functionArgs });\n      await doContractCall({\n        contractAddress,\n        contractName,\n        functionName: 'delegate-stx',\n        functionArgs,\n        postConditionMode: PostConditionMode.Deny,\n        postConditions: [],\n        userSession,\n        network: NETWORK,\n        finished: data => {\n          console.log(data);\n          setStatus(undefined);\n          setTxId(data.txId);\n          spinner.current.classList.add('d-none');\n        },\n      });\n    } catch (e) {\n      console.log(e);\n      setStatus(e.toString());\n      spinner.current.classList.add('d-none');\n    }\n  };\n\n  return (\n    <div>\n      <h5>Join the pool</h5>\n      <PoolInfo pool={pool} />\n      <div className=\"NoteField\">\n        Choose an amount, how much you would like to \"delegately\" stack through this pool (can be\n        higher than your balance to compound future rewards if stacking indefinitely).\n        <input\n          type=\"number\"\n          step=\"any\"\n          min=\"0\"\n          ref={amount}\n          className=\"form-control\"\n          placeholder=\"Amount in STX\"\n          onKeyUp={e => {\n            if (e.key === 'Enter') duration.current.focus();\n          }}\n          onBlur={e => {\n            setStatus(undefined);\n          }}\n        />\n        <br />\n        Duration of your pool membership (until which BTC block)\n        <input\n          type=\"text\"\n          ref={duration}\n          className=\"form-control\"\n          placeholder=\"Leave empty for indefinite duration\"\n          onKeyUp={e => {\n            if (e.key === 'Enter') lockingPeriod.current.focus();\n          }}\n          onBlur={e => {\n            setStatus(undefined);\n          }}\n        />\n        <br />\n        Locking Period (how long do you want to swim this time?)\n        <input\n          type=\"text\"\n          ref={lockingPeriod}\n          className=\"form-control\"\n          placeholder=\"Number of cycles\"\n          disabled={isSimple}\n          readOnly={pool && pool.data['locking-period'].type === ClarityType.List}\n          defaultValue={\n            pool && pool.data['locking-period'].type === ClarityType.List\n              ? pool.data['locking-period'].list.map(lp => lp.value.toString(10)).join(' - ')\n              : ''\n          }\n          onKeyUp={e => {\n            if (e.key === 'Enter') payoutAddress.current.focus();\n          }}\n          onBlur={e => {\n            setStatus(undefined);\n          }}\n        />\n        <br />\n        Payout address (how would you like to get your rewards)\n        <input\n          type=\"text\"\n          ref={payoutAddress}\n          className=\"form-control\"\n          defaultValue={userPayoutAddress}\n          disabled={isSimple}\n          onKeyUp={e => {\n            if (e.key === 'Enter') joinAction();\n          }}\n          onBlur={e => {\n            setStatus(undefined);\n          }}\n        />\n        <br />\n        <div className=\"input-group-append\">\n          <button className=\"btn btn-outline-secondary\" type=\"button\" onClick={joinAction}>\n            <div\n              ref={spinner}\n              role=\"status\"\n              className=\"d-none spinner-border spinner-border-sm text-info align-text-top mr-2\"\n            />\n            Delegate\n          </button>\n        </div>\n      </div>\n      <div>\n        <TxStatus txId={txId} resultPrefix=\"You joined the pool \" />\n      </div>\n      {status && (\n        <>\n          <div>{status}</div>\n        </>\n      )}\n    </div>\n  );\n}\n","import React, { useRef, useState, useEffect } from 'react';\n\nimport { accountsApi, NETWORK, smartContractsApi } from '../lib/constants';\nimport { TxStatus } from '../lib/transactions';\nimport { fetchAccount } from '../lib/account';\nimport { useConnect as useStacksJsConnect } from '@stacks/connect-react';\nimport {\n  bufferCV,\n  ClarityType,\n  contractPrincipalCV,\n  cvToHex,\n  cvToString,\n  hexToCV,\n  noneCV,\n  PostConditionMode,\n  someCV,\n  standardPrincipalCV,\n  tupleCV,\n  uintCV,\n} from '@stacks/transactions';\nimport * as c32 from 'c32check';\nimport { poxAddrCV, poxAddrCVFromBitcoin } from '../lib/pools-utils';\nimport { StackingClient } from '@stacks/stacking';\nimport { Amount } from './Amount';\nimport { PoXRevoke } from './PoXRevoke';\n\nfunction getPayoutAddress(payout, stxAddress) {\n  console.log({ payout, stxAddress });\n  if (!stxAddress) return undefined;\n  switch (payout) {\n    case 'BTC':\n      return c32.c32ToB58(stxAddress);\n    case 'STX':\n      return stxAddress;\n    default:\n      return stxAddress;\n  }\n}\n\nfunction getPayoutAddressCV(payout, address) {\n  switch (payout) {\n    case 'BTC':\n      return poxAddrCVFromBitcoin(address);\n    case 'STX':\n      return poxAddrCV(address);\n    default:\n      return tupleCV({\n        hashbytes: bufferCV(Buffer.from([0])),\n        version: bufferCV(Buffer.from([0])),\n      });\n  }\n}\n\nexport function PoolJoinSimple({ delegatee, ownerStxAddress, userSession }) {\n  console.log({ ownerStxAddress, userSession });\n  const { doContractCall } = useStacksJsConnect();\n  const amount = useRef();\n  const duration = useRef();\n  const payoutAddress = useRef();\n  const lockingPeriod = useRef();\n\n  const [status, setStatus] = useState();\n  const [txId, setTxId] = useState();\n  const [stackingStatus, setStackingStatus] = useState();\n  const [delegationState, setDelegationState] = useState();\n  const [suggestedAmount, setSuggestedAmount] = useState();\n  const [loading, setLoading] = useState(false);\n  const [progress1, setProgress1] = useState(5);\n  const [progress2, setProgress2] = useState(0);\n  const [progress3, setProgress3] = useState(0);\n  const [progress4, setProgress4] = useState(0);\n\n  const contractId = 'SP000000000000000000002Q6VF78.pox';\n  const [contractAddress, contractName] = contractId.split('.');\n\n  useEffect(() => {\n    if (ownerStxAddress) {\n      fetchAccount(ownerStxAddress)\n        .catch(e => {\n          setStatus('Failed to access your account', e);\n          console.log(e);\n          setProgress1(25);\n        })\n        .then(async acc => {\n          setStatus(undefined);\n          console.log({ acc });\n          setProgress1(25);\n        });\n      accountsApi.getAccountBalance({ principal: ownerStxAddress }).then(balance => {\n        console.log(balance);\n        const stxBalance = (parseInt(balance.stx.balance) - parseInt(balance.stx.locked)) / 1000000;\n        setSuggestedAmount(Math.min(stxBalance, 100));\n        setProgress2(25);\n      });\n\n      const client = new StackingClient(ownerStxAddress, NETWORK);\n      client.getStatus().then(s => {\n        setStackingStatus(s);\n        setProgress3(25);\n      });\n      smartContractsApi\n        .getContractDataMapEntry({\n          contractAddress: 'SP000000000000000000002Q6VF78',\n          contractName: 'pox',\n          mapName: 'delegation-state',\n          key: cvToHex(tupleCV({ stacker: standardPrincipalCV(ownerStxAddress) })),\n          network: NETWORK,\n        })\n        .then(result => {\n          const mapEntry = hexToCV(result.data);\n\n          if (mapEntry.type === ClarityType.OptionalNone) {\n            setDelegationState({ state: undefined });\n          } else {\n            setDelegationState({ state: mapEntry.value });\n          }\n          setProgress4(25);\n        });\n    }\n  }, [ownerStxAddress, setSuggestedAmount]);\n\n  const isSimple = true;\n  const parts = delegatee.split('.');\n  const delegateeCV =\n    parts.length < 2 ? standardPrincipalCV(parts[0]) : contractPrincipalCV(parts[0], parts[1]);\n  const rewardBtcAddressCV = noneCV();\n  const payout = 'STX';\n  const userPayoutAddress = getPayoutAddress(payout, ownerStxAddress);\n\n  const joinAction = async () => {\n    setLoading(true);\n    const amountCV = uintCV(amount.current.value.trim() * 1000000); // convert to uSTX\n    const durationCV = duration.current.value.trim()\n      ? someCV(uintCV(duration.current.value.trim()))\n      : noneCV();\n    const payoutAddressCV = isSimple\n      ? undefined\n      : getPayoutAddressCV(payout, payoutAddress.current.value.trim());\n    const lockingPeriodCV = isSimple ? undefined : uintCV(lockingPeriod.current.value.trim);\n    try {\n      setStatus(`Sending transaction`);\n      const functionArgs = isSimple\n        ? [amountCV, delegateeCV, durationCV, rewardBtcAddressCV]\n        : [amountCV, delegateeCV, durationCV, rewardBtcAddressCV, payoutAddressCV, lockingPeriodCV];\n      console.log({ functionArgs });\n      await doContractCall({\n        contractAddress,\n        contractName,\n        functionName: 'delegate-stx',\n        functionArgs,\n        postConditionMode: PostConditionMode.Deny,\n        postConditions: [],\n        userSession,\n        network: NETWORK,\n        onFinish: data => {\n          console.log(data);\n          setStatus(undefined);\n          setTxId(data.txId);\n          setLoading(false);\n        },\n      });\n    } catch (e) {\n      console.log(e);\n      setStatus(e.toString());\n      setLoading(false);\n    }\n  };\n\n  const progress = progress1 + progress2 + progress3 + progress4;\n  return (\n    <div>\n      {progress < 100 && (\n        <div class=\"progress\">\n          <div\n            class=\"progress-bar\"\n            role=\"progressbar\"\n            style={{ width: `${progress}%` }}\n            aria-valuenow={progress}\n            aria-valuemin=\"0\"\n            aria-valuemax=\"100\"\n          />\n        </div>\n      )}\n      <section>\n        {delegationState &&\n          (delegationState.state ? (\n            <>\n              You have joined the pool {cvToString(delegationState.state.data['delegated-to'])} with{' '}\n              <Amount ustx={delegationState.state.data['amount-ustx'].value} />.\n              <br />\n              <PoXRevoke userSession={userSession} setStatus={setStatus} setTxId={setTxId}/>\n            </>\n          ) : (\n            <>You are not delegating to any pool.</>\n          ))}\n      </section>\n      <section>\n        {stackingStatus &&\n          (stackingStatus.stacked ? (\n            <>\n              You stacked <Amount ustx={stackingStatus.details.amount_microstx} /> until cycle #\n              {stackingStatus.details.first_reward_cycle + stackingStatus.details.lock_period}.\n            </>\n          ) : (\n            <>Your Stacks tokens are not locked.</>\n          ))}\n        {progress < 100 && (\n          <div\n            role=\"status\"\n            className=\"spinner-border spinner-border-sm text-info align-text-top mr-2\"\n          />\n        )}\n      </section>\n      {stackingStatus && !stackingStatus.stacked && delegationState && !delegationState.state && (\n        <>\n          <h5>Join the pool</h5>\n          Pool address: <strong>{delegatee}</strong>\n          <div className=\"NoteField\">\n            Choose an amount, how much you would like to \"delegately\" stack through this pool (can\n            be higher than your balance to compound future rewards if stacking indefinitely).\n            <input\n              type=\"number\"\n              step=\"any\"\n              min=\"100\"\n              ref={amount}\n              defaultValue={suggestedAmount}\n              className=\"form-control\"\n              placeholder=\"Amount in STX\"\n              onKeyUp={e => {\n                if (e.key === 'Enter') duration.current.focus();\n              }}\n              onBlur={e => {\n                setStatus(undefined);\n              }}\n            />\n            <br />\n            Duration of your pool membership (until BTC block)\n            <input\n              type=\"text\"\n              ref={duration}\n              className=\"form-control\"\n              placeholder=\"Leave empty for indefinite duration\"\n              onKeyUp={e => {\n                if (e.key === 'Enter') lockingPeriod.current.focus();\n              }}\n              onBlur={e => {\n                setStatus(undefined);\n              }}\n            />\n            <br />\n            {delegatee === 'SPSTX06BNGJ2CP1F6WA8V49B6MYD784N6YZMK95G' && (\n              <>\n                Locking Period (how long do you want to swim this time?)\n                <input\n                  type=\"text\"\n                  ref={lockingPeriod}\n                  className=\"form-control\"\n                  placeholder=\"Number of cycles\"\n                  disabled={isSimple}\n                  defaultValue={2}\n                  onKeyUp={e => {\n                    if (e.key === 'Enter') payoutAddress.current.focus();\n                  }}\n                  onBlur={e => {\n                    setStatus(undefined);\n                  }}\n                />\n                <br />\n                Payout address (how would you like to get your rewards)\n                <input\n                  type=\"text\"\n                  ref={payoutAddress}\n                  className=\"form-control\"\n                  defaultValue={userPayoutAddress}\n                  disabled={isSimple}\n                  onKeyUp={e => {\n                    if (e.key === 'Enter') joinAction();\n                  }}\n                  onBlur={e => {\n                    setStatus(undefined);\n                  }}\n                />\n                <br />\n              </>\n            )}\n            <div className=\"input-group-append\">\n              <button className=\"btn btn-outline-secondary\" type=\"button\" onClick={joinAction}>\n                <div\n                  role=\"status\"\n                  className={`${\n                    loading ? '' : 'd-none'\n                  } spinner-border spinner-border-sm text-info align-text-top mr-2`}\n                />\n                Delegate\n              </button>\n            </div>\n          </div>\n          <div>\n            <TxStatus txId={txId} resultPrefix=\"You joined the pool \" />\n          </div>\n          {status && (\n            <>\n              <div>{status}</div>\n            </>\n          )}\n        </>\n      )}\n    </div>\n  );\n}\n","import {\n  createStacksPrivateKey,\n  getPublicKey,\n  addressFromPublicKeys,\n  AddressVersion,\n  AddressHashMode,\n  callReadOnlyFunction,\n  bufferCVFromString,\n  ClarityType,\n  cvToString,\n  cvToHex,\n  standardPrincipalCV,\n  hexToCV,\n} from '@stacks/transactions';\nimport {\n  accountsApi,\n  BNS_CONTRACT_NAME,\n  GENESIS_CONTRACT_ADDRESS,\n  NETWORK,\n  smartContractsApi,\n  STACKS_API_ACCOUNTS_URL,\n} from './constants';\n\nexport function getStacksAccount(appPrivateKey) {\n  const privateKey = createStacksPrivateKey(appPrivateKey);\n  const publicKey = getPublicKey(privateKey);\n  const address = addressFromPublicKeys(\n    AddressVersion.MainnetSingleSig,\n    AddressHashMode.SerializeP2PKH,\n    1,\n    [publicKey]\n  );\n  return { privateKey, address };\n}\n\nexport async function getUserAddress(userSession, username) {\n  const parts = username.split('.');\n  if (parts.length === 2) {\n    console.log(parts);\n    const result = await callReadOnlyFunction({\n      contractAddress: GENESIS_CONTRACT_ADDRESS,\n      contractName: BNS_CONTRACT_NAME,\n      functionName: 'name-resolve',\n      functionArgs: [bufferCVFromString(parts[1]), bufferCVFromString(parts[0])],\n      network: NETWORK,\n      senderAddress: GENESIS_CONTRACT_ADDRESS,\n    });\n    if (result.type === ClarityType.ResponseOk) {\n      return { address: cvToString(result.value.data.owner) };\n    } else {\n      return undefined;\n    }\n  } else {\n    return undefined;\n  }\n}\n\n/**\n * Uses the AccountsApi of the stacks blockchain api client library,\n * returns the stacks balance object with property `balance` in decimal.\n */\nexport function fetchAccount(addressAsString) {\n  console.log(`Checking account \"${addressAsString}\"`);\n  if (addressAsString) {\n    return accountsApi\n      .getAccountBalance({ principal: addressAsString })\n      .then(response => response.stx);\n  } else {\n    return Promise.reject();\n  }\n}\n\n/**\n * Uses the RCP api of the stacks node directly,\n * returns the json object with property `balance` in hex.\n */\nexport function fetchAccount2(addressAsString) {\n  console.log('Checking account');\n  const balanceUrl = `${STACKS_API_ACCOUNTS_URL}/${addressAsString}`;\n  return fetch(balanceUrl).then(r => {\n    console.log({ r });\n    return r.json();\n  });\n}\n\nexport async function getUsername(addressAsString) {\n  const nameResult = await smartContractsApi.callReadOnlyFunction({\n    contractAddress: GENESIS_CONTRACT_ADDRESS,\n    contractName: 'bns',\n    functionName: 'resolve-principal',\n    readOnlyFunctionArgs: {\n      sender: addressAsString,\n      arguments: [cvToHex(standardPrincipalCV(addressAsString))],\n    },\n  });\n  if (nameResult.okay && nameResult.result !== '0x09') {\n    const resultCV = hexToCV(nameResult.result);\n    if (resultCV.type === ClarityType.ResponseOk) {\n      return resultCV.value;\n    } else {\n      console.log({ nameResult });\n      console.log('No name found. Error: ' + resultCV.value.data.code.value.toString(10));\n      return undefined;\n    }\n  } else {\n    return undefined;\n  }\n}\n","import { AddressHashMode, bufferCV, tupleCV } from '@stacks/transactions';\nimport { address } from 'bitcoinjs-lib';\nimport * as c32 from 'c32check';\n\nfunction getAddressHashMode(btcAddress) {\n  if (btcAddress.startsWith('bc1') || btcAddress.startsWith('tb1')) {\n    const { data } = address.fromBech32(btcAddress);\n    if (data.length === 32) {\n      return AddressHashMode.SerializeP2WSH;\n    } else {\n      return AddressHashMode.SerializeP2WPKH;\n    }\n  } else {\n    const { version } = address.fromBase58Check(btcAddress);\n    switch (version) {\n      case 0:\n        return AddressHashMode.SerializeP2PKH;\n      case 111:\n        return AddressHashMode.SerializeP2PKH;\n      case 5:\n        return AddressHashMode.SerializeP2SH;\n      case 196:\n        return AddressHashMode.SerializeP2SH;\n      default:\n        throw new Error('Invalid pox address version');\n    }\n  }\n}\n\nexport function addressHashModeToBtcVersion(hashMode, mainnet = true) {\n  switch (hashMode) {\n    case AddressHashMode.SerializeP2PKH:\n      return mainnet ? 0 : 111;\n    case AddressHashMode.SerializeP2SH:\n      return mainnet ? 5 : 196;\n    default:\n      throw new Error('Invalid hash mode');\n  }\n}\n\nfunction decodeBtcAddress(btcAddress) {\n  const hashMode = getAddressHashMode(btcAddress);\n  if (btcAddress.startsWith('bc1') || btcAddress.startsWith('tb1')) {\n    const { data } = address.fromBech32(btcAddress);\n    return {\n      hashMode,\n      data,\n    };\n  } else {\n    const { hash } = address.fromBase58Check(btcAddress);\n    return {\n      hashMode,\n      data: hash,\n    };\n  }\n}\n\nfunction decodeStxAddress(stxAddress) {\n  const btcAddress = c32.c32ToB58(stxAddress);\n  return decodeBtcAddress(btcAddress);\n}\n\nexport function poxAddrCVFromBitcoin(btcAddress) {\n  const { hashMode, data } = decodeBtcAddress(btcAddress);\n  return tupleCV({\n    hashbytes: bufferCV(data),\n    version: bufferCV(Buffer.from([hashMode])),\n  });\n}\n\nexport function poxAddrCV(stxAddress) {\n  const { hashMode, data } = decodeStxAddress(stxAddress);\n  console.log({hashMode, data})\n  return tupleCV({\n    hashbytes: bufferCV(data),\n    version: bufferCV(Buffer.from([hashMode])),\n  });\n}\n\nexport function poxCVToBtcAddress(poxAddrCV) {\n  return address.toBase58Check(\n    poxAddrCV.data.hashbytes.buffer,\n    addressHashModeToBtcVersion(poxAddrCV.data.version.buffer.valueOf()[0], true)\n  );\n}\n","var map = {\n\t\"./connect-modal.entry.js\": [\n\t\t736,\n\t\t4\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 723;\nmodule.exports = webpackAsyncContext;","import { useCallback } from 'react';\nimport { AppConfig, UserSession } from '@stacks/connect-react';\nimport { showConnect } from '@stacks/connect';\nimport { authOrigin } from './constants';\nimport { atom, useAtom } from 'jotai';\nimport { useUpdateAtom } from 'jotai/utils';\n\nconst appConfig = new AppConfig(['store_write', 'publish_data']);\nexport const userSessionState = atom(new UserSession({ appConfig }));\nexport const userDataState = atom();\nexport const authResponseState = atom();\n\nexport const useConnect = () => {\n  const [userSession] = useAtom(userSessionState);\n  const setUserData = useUpdateAtom(userDataState);\n  const setAuthResponse = useUpdateAtom(authResponseState);\n\n  const onFinish = async payload => {\n    setAuthResponse(payload.authResponse);\n    const userData = await payload.userSession.loadUserData();\n    setUserData(userData);\n  };\n\n  const authOptions = {\n    authOrigin: authOrigin,\n    onFinish,\n    userSession, // usersession is already in state, provide it here\n    redirectTo: '/',\n    manifestPath: '/manifest.json',\n    appDetails: {\n      name: 'Pool Registry',\n      icon: '/pool-registry.png',\n    },\n  };\n\n  const handleOpenAuth = () => {\n    showConnect(authOptions);\n  };\n\n  const handleSignOut = useCallback(() => {\n    userSession?.signUserOut(\"/\");\n  }, [userSession]);\n\n  return { handleOpenAuth, handleSignOut, authOptions };\n};\n","import React from 'react';\nimport { useConnect } from '../lib/auth';\nimport { CONTRACT_ADDRESS, POOL_REGISTRY_CONTRACT_NAME } from '../lib/constants';\n\n// Landing page demonstrating Blockstack connect for registration\n\nexport default function Landing(props) {\n  const { handleOpenAuth } = useConnect();\n\n  return (\n    <div className=\"Landing\">\n      <div className=\"jumbotron jumbotron-fluid pt-3 mb-0\">\n        <div className=\"container\">\n          <div className=\"panel-landing text-center mt-3\">\n            <h1 className=\"landing-heading\">Pool Registry</h1>\n            <p className=\"lead\">A simple app to join and register Stacking Pools</p>\n\n            <p className=\"alert alert-info  border-info\">\n              Pool Registry is an{' '}\n              <a\n                href=\"https://github.com/friedger/starter-app\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                open source\n              </a>{' '}\n              web app with the purpose of{' '}\n              <strong>helping everybody quickly find and join a Stacking Pool.</strong>\n            </p>\n\n            <div className=\"card mt-4 border-info\">\n              <div className=\"card-header\">\n                <h5 className=\"card-title\">About Delegated Stacking</h5>\n              </div>\n              <div className=\"row\">\n                <div className=\"col col-md-12 p-4\">\n                  Delegated Stacking is a way to participate in the Proof of Transfer consensus\n                  algorithm with small amounts of STX.\n                </div>\n              </div>\n            </div>\n\n            <div className=\"card mt-4 border-info\">\n              <div className=\"card-header\">\n                <h5 className=\"card-title\">Pool Registry</h5>\n              </div>\n              <div className=\"card-body\">\n                <p className=\"card-text mb-3\">\n                  Pool Registry is a web interface to the pool registry smart contract{' '}\n                  <a href={`https://explorer.stacks.co/txid/${CONTRACT_ADDRESS}.${POOL_REGISTRY_CONTRACT_NAME}?chain=mainnet`}>\n                    {CONTRACT_ADDRESS}.{POOL_REGISTRY_CONTRACT_NAME}\n                  </a>\n                  .\n                </p>\n              </div>\n\n              <p className=\"card-link mb-5\">\n                <button className=\"btn btn-outline-primary\" type=\"button\" onClick={handleOpenAuth}>\n                  Start now\n                </button>\n              </p>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","import React from 'react';\nimport { CONTRACT_ADDRESS, POOL_REGISTRY_CONTRACT_NAME } from '../lib/constants';\n\nexport default function Overview(props) {\n  return (\n    <main className=\"panel-welcome mt-5 container\">\n      <div className=\"lead row mt-5 mb-3\">\n        <div className=\"col-xs-10 col-md-8 mx-auto px-4\">\n          <h1 className=\"card-title\">Overview</h1>\n        </div>\n        <div className=\"col-xs-10 col-md-8 mx-auto mb-3 px-4\">\n          This site allows you engage with the Stacks Proof of Transfer consensus algorithm through\n          delegated stacking.\n        </div>\n        <div className=\"col-xs-10 col-md-8 mx-auto mb-3 px-4\">\n          You can learn about delegated stacking at\n          <ul>\n            <li>\n              <a href=\"https://stacks101.com\">stacks101.com</a>\n            </li>\n            <li>\n              <a href=\"https://stacking.club/learn\">stacking.club/learn</a>\n            </li>\n          </ul>\n        </div>\n        <div className=\"col-xs-10 col-md-8 mx-auto mb-3 px-4\">\n          Pool Registry is a web interface to the pool registry smart contract{' '}\n          <a\n            href={`https://explorer.stacks.co/txid/${CONTRACT_ADDRESS}.${POOL_REGISTRY_CONTRACT_NAME}?chain=mainnet`}\n          >\n            {CONTRACT_ADDRESS}.{POOL_REGISTRY_CONTRACT_NAME}\n          </a>\n          .\n        </div>\n      </div>\n    </main>\n  );\n}\n","import React from 'react';\nimport { useConnect, userSessionState } from '../lib/auth';\nimport { useAtom } from 'jotai';\n// Authentication button adapting to status\n\nexport default function Auth() {\n  const { handleSignOut } = useConnect();\n  const [userSession] = useAtom(userSessionState);\n\n  if (userSession?.isUserSignedIn()) {\n    return (\n      <button\n        className=\"btn btn-primary btn-lg\"\n        onClick={() => {\n          console.log('signOut');\n          handleSignOut();\n        }}\n      >\n        Log Out\n      </button>\n    );\n  } else {\n    return null;\n  }\n}\n","import { getUserData } from '@stacks/connect-react';\nimport { addressToString } from '@stacks/transactions';\n\nimport { useState, useEffect } from 'react';\nimport { getStacksAccount } from './account';\n\nexport function useStxAddresses(userSession) {\n  const [ownerStxAddress, setOwnerStxAddress] = useState();\n  const [appStxAddress, setAppStxAddress] = useState();\n  const [appPrivateKey, setAppPrivateKey] = useState();\n  useEffect(() => {\n    getUserData(userSession).then(userData => {\n      const { address } = getStacksAccount(userData.appPrivateKey);\n      setAppStxAddress(addressToString(address));\n      setOwnerStxAddress(userData.profile.stxAddress.mainnet);\n      setAppPrivateKey(userData.appPrivateKey);\n    });\n  }, [userSession]);\n\n  return { ownerStxAddress, appStxAddress, appPrivateKey };\n}\n","import React, { useRef } from 'react';\n\nimport { useNavigate } from '@reach/router';\nimport PoolInfo from './PoolInfo';\n\nfunction hasJoined(pool, userInfo) {\n  return pool === userInfo?.delegation?.delegatedTo;\n}\n\nfunction isStacking(pool, userInfo) {\n  return pool === userInfo?.stacking?.poxAddr;\n}\n\nexport function Pool({ pool, poolId, userInfo }) {\n  const navigate = useNavigate();\n\n  const spinner = useRef();\n\n  return (\n    <div>\n      {pool ? (\n        <>\n          <PoolInfo pool={pool} />\n          {(!userInfo || userInfo.canJoin) && (\n            <div className=\"input-group \">\n              <button\n                className=\"btn btn-outline-secondary\"\n                type=\"button\"\n                onClick={() => {\n                  navigate(`/pools/${poolId}`, { state: { pool } });\n                }}\n              >\n                <div\n                  ref={spinner}\n                  role=\"status\"\n                  className=\"d-none spinner-border spinner-border-sm text-info align-text-top mr-2\"\n                />\n                Join Pool\n              </button>\n            </div>\n          )}\n          {userInfo && hasJoined(pool, userInfo) && <>You joined this pool.</>}\n          {userInfo && isStacking(pool, userInfo) && <>You are stacking with this pool.</>}\n        </>\n      ) : (\n        <>\n          <br />\n          Pool does not exist.\n          <br />\n          <br />\n        </>\n      )}\n    </div>\n  );\n}\n","import React, { useState, useEffect } from 'react';\n\nimport { Pool } from './Pool';\nimport { fetchPools, usernameCVToName } from '../lib/pools';\nimport { poxCVToBtcAddress } from '../lib/pools-utils';\nimport { cvToString } from '@stacks/transactions';\n\nexport function PoolList({ payout, lockingPeriod, search, verifyUsername }) {\n  const [status, setStatus] = useState();\n  const [pools, setPools] = useState();\n\n  useEffect(() => {\n    setStatus('Loading pools');\n    fetchPools({ verify: verifyUsername })\n      .then(async pools => {\n        setStatus(undefined);\n        console.log(pools);\n        setPools(pools);\n      })\n      .catch(e => {\n        setStatus('Failed to get pools', e);\n        console.log(e);\n      });\n  }, [verifyUsername]);\n\n  const filteredPools =\n    pools &&\n    pools.filter(\n      pool =>\n        (!payout || pool.data['payout'].data === payout) &&\n        (!lockingPeriod ||\n          isNaN(lockingPeriod) ||\n          pool.data['locking-period'].list.findIndex(item => {\n            console.log({ i: item.value, lp: lockingPeriod });\n            return item.value >= lockingPeriod;\n          }) >= 0) &&\n        (!search ||\n          pool.data.fees.data.indexOf(search) >= 0 ||\n          pool.data['date-of-payout'].data.indexOf(search) >= 0 ||\n          pool.data['url'].data.indexOf(search) >= 0 ||\n          usernameCVToName(pool.data.name).indexOf(search) >= 0 ||\n          pool.data['pox-address'].list\n            .map(addr => poxCVToBtcAddress(addr))\n            .join(' ')\n            .indexOf(search) >= 0 ||\n          cvToString(pool.data.delegatee).indexOf(search) >= 0)\n    );\n  return (\n    <div>\n      {filteredPools &&\n        filteredPools.map((pool, key) => {\n          return <Pool key={key} pool={pool} poolId={pool.data['pool-id'].value} />;\n        })}\n      {!status && (!filteredPools || filteredPools.length === 0) && <>No pools found.</>}\n      {status && (\n        <>\n          <div>{status}</div>\n        </>\n      )}\n    </div>\n  );\n}\n","import React, { useState, useRef } from 'react';\n\nimport { useStxAddresses } from '../lib/hooks';\nimport { PoolList } from '../components/PoolList';\n\nexport default function PoolRegistry(props) {\n  const { ownerStxAddress } = useStxAddresses();\n  const payoutRef = useRef();\n  const lockingPeriodRef = useRef();\n  const searchRef = useRef();\n  const [payout, setPayout] = useState();\n  const [lockingPeriod, setLockingPeriod] = useState();\n  const [search, setSearch] = useState();\n\n  return (\n    <main className=\"panel-welcome mt-5 container\">\n      <div className=\"lead row mt-5\">\n        <div className=\"col-xs-10 col-md-8 mx-auto px-4\">\n          <h1 className=\"card-title\">List of public pools</h1>\n        </div>\n        <div className=\"col-xs-10 col-md-8 mx-auto px-4\">\n          <select\n            ref={payoutRef}\n            onChange={e => {\n              setPayout(e.target.value);\n            }}\n          >\n            <option value=\"\">any</option>\n            <option value=\"BTC\">BTC</option>\n            <option value=\"STX\">STX</option>\n          </select>\n          <input\n            type=\"number\"\n            ref={lockingPeriodRef}\n            placeholder=\"minimum locking period\"\n            onChange={e => {\n              setLockingPeriod(parseInt(e.target.value.trim()));\n            }}\n          />\n          <input\n            type=\"text\"\n            ref={searchRef}\n            placeholder=\"search term\"\n            onChange={e => {\n              setSearch(e.target.value.trim());\n            }}\n          />\n          <button\n            className=\"btn btn-outline-secondary\"\n            type=\"button\"\n            onClick={() => {\n              setPayout(payoutRef.current.value);\n              setLockingPeriod(parseInt(lockingPeriodRef.current.value.trim()));\n              setSearch(searchRef.current.value.trim());\n            }}\n          >\n            Filter\n          </button>\n        </div>\n        <div className=\"col-xs-10 col-md-8 mx-auto mb-4 px-4\">\n          <PoolList\n            ownerStxAddress={ownerStxAddress}\n            payout={payout}\n            lockingPeriod={lockingPeriod}\n            search={search}\n            verifyUsername\n          />\n        </div>\n\n        <div className=\"card col-md-8 mx-auto mt-5 mb-5 text-center px-0 border-warning\">\n          <div className=\"card-header\">\n            <h5 className=\"card-title\">Instructions</h5>\n          </div>\n          <ul className=\"list-group list-group-flush\">\n            <li className=\"list-group-item\">Select the pool you trust and click the join button.</li>\n            <li className=\"list-group-item\">\n              Enter the amount, duration, and reward address to define how you would like to stack\n              and click delegate.\n            </li>\n            <li className=\"list-group-item\">\n              Wait for the pool admin to do the necessary and collect your rewards.\n            </li>\n          </ul>\n        </div>\n      </div>\n    </main>\n  );\n}\n","import React, { useEffect, useState } from 'react';\nimport { useStxAddresses } from '../lib/hooks';\nimport { PoolJoin } from '../components/PoolJoin';\nimport { fetchPool } from '../lib/pools';\n\nexport default function PoolDetails({ poolId, location, userSession }) {\n  const { ownerStxAddress } = useStxAddresses(userSession);\n  const [poolData, setPoolData] = useState();\n  console.log({ poolData });\n  useEffect(() => {\n    const fn = async () => {\n      const p = await fetchPool(poolId);\n      console.log(p);\n      setPoolData(p);\n    };\n    fn();\n  }, [poolId]);\n  return (\n    <main className=\"panel-welcome mt-5 container\">\n      <div className=\"lead row mt-5\">\n        <div className=\"col-xs-10 col-md-8 mx-auto px-4\">\n          <h1 className=\"card-title\">Pool</h1>\n        </div>\n\n        <div className=\"col-xs-10 col-md-8 mx-auto mb-4 px-4\">\n          {poolData && (\n            <PoolJoin\n              poolId={poolId}\n              pool={poolData}\n              ownerStxAddress={ownerStxAddress}\n              userSession={userSession}\n            />\n          )}\n        </div>\n\n        <div className=\"card col-md-8 mx-auto mt-5 mb-5 text-center px-0 border-warning\">\n          <div className=\"card-header\">\n            <h5 className=\"card-title\">Instructions</h5>\n          </div>\n          <ul className=\"list-group list-group-flush\">\n            <li className=\"list-group-item\">\n              Enter the amount, duration, and reward address to define how you would like to stack\n              and click delegate.\n            </li>\n            <li className=\"list-group-item\">\n              Wait for the pool admin to do the necessary and collect your rewards.\n            </li>\n          </ul>\n        </div>\n      </div>\n    </main>\n  );\n}\n","import { useCallback, useEffect, useRef, useState } from \"react\";\nimport { fetchAccount } from \"../lib/account\";\n\nexport function StxProfile({ stxAddress, updateStatus, showAddress }) {\n  const spinner = useRef();\n\n  const [profileState, setProfileState] = useState({\n    account: undefined,\n  });\n\n  const onRefreshBalance = useCallback(\n    async stxAddress => {\n      updateStatus(undefined);\n      spinner.current.classList.remove('d-none');\n\n      fetchAccount(stxAddress)\n        .then(acc => {\n          setProfileState({ account: acc });\n          spinner.current.classList.add('d-none');\n        })\n        .catch(e => {\n          updateStatus('Refresh failed');\n          console.log(e);\n          spinner.current.classList.add('d-none');\n        });\n    },\n    [updateStatus]\n  );\n\n  useEffect(() => {\n    fetchAccount(stxAddress).then(acc => {\n      setProfileState({ account: acc });\n    });\n  }, [stxAddress]);\n\n  return (\n    <>\n      {stxAddress && showAddress && (\n        <>\n          {stxAddress} <br />\n        </>\n      )}\n      {profileState.account && (\n        <>\n          Your balance: {(parseInt(profileState.account.balance) / 1000000).toFixed(6)} STX.\n          <br />\n        </>\n      )}\n      <button\n        className=\"btn btn-outline-secondary mt-1\"\n        onClick={e => {\n          onRefreshBalance(stxAddress);\n        }}\n      >\n        <div\n          ref={spinner}\n          role=\"status\"\n          className=\"d-none spinner-border spinner-border-sm text-info align-text-top mr-2\"\n        />\n        Refresh balance\n      </button>\n    </>\n  );\n}\n","import { getUserData } from '@stacks/connect-react';\nimport { Person } from '@stacks/profile';\n\nimport React, { useRef, useState, useCallback, useEffect } from 'react';\nimport { fetchAccount, getUsername } from '../lib/account';\nimport { useNavigate } from '@reach/router';\nimport { fetchPools } from '../lib/pools';\nimport PoolInfo from './PoolInfo';\nimport { PoXRevoke } from './PoXRevoke';\nimport { StxProfile } from './StxProfile';\n\n// Demonstrating BlockstackContext for legacy React Class Components.\n\nexport default function Profile({ stxAddresses, userSession }) {\n  const [status, setStatus] = useState('');\n  const [pools, setPools] = useState();\n  const [nameCV, setNameCV] = useState();\n  const navigate = useNavigate();\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    setLoading(true);\n    if (stxAddresses.ownerStxAddress) {\n      fetchPools({})\n        .then(async pools => {\n          setStatus(undefined);\n          console.log(pools);\n          setPools(pools);\n          setNameCV(await getUsername(stxAddresses.ownerStxAddress));\n          setLoading(false);\n        })\n        .catch(e => {\n          setStatus('Failed to get pools', e);\n          setLoading(false);\n          console.log(e);\n        });\n    }\n  }, [stxAddresses.ownerStxAddress]);\n\n  if (!userSession || !stxAddresses.ownerStxAddress) {\n    return <div>Loading</div>;\n  }\n\n  const { userData } = getUserData(userSession);\n  const person = userData && new Person(userData.profile);\n  const username = userData && userData.username;\n\n  const updateStatus = status => {\n    setStatus(status);\n    setTimeout(() => {\n      setStatus(undefined);\n    }, 2000);\n  };\n\n  const avatarFallbackImage = 'https://s3.amazonaws.com/onename/avatar-placeholder.png';\n  const proxyUrl = url => '/proxy/' + url.replace(/^https?:\\/\\//i, '');\n\n  return (\n    <div className=\"Profile\">\n      <div className=\"avatar-section text-center\">\n        <img\n          src={proxyUrl((person && person.avatarUrl()) || avatarFallbackImage)}\n          className=\"img-rounded avatar\"\n          id=\"avatar-image\"\n          alt=\"Avatar\"\n        />\n      </div>\n      <div className=\"text-center mt-2\">\n        Hello, <span id=\"heading-name\">{(person && person.name()) || username || 'Stacker'}</span>!\n      </div>\n      {(username || nameCV) && (\n        <>\n          Your Blockstack username is{' '}\n          {username ||\n            `${nameCV.data['name'].buffer.toString()}.${nameCV.data[\n              'namespace'\n            ].buffer.toString()}`}{' '}\n          <br />\n        </>\n      )}\n      <div className=\"pt-4\">\n        Your own Stacks address:\n        <br />\n        <StxProfile\n          stxAddress={stxAddresses.ownerStxAddress}\n          updateStatus={updateStatus}\n          showAddress\n        ></StxProfile>\n      </div>\n\n      {pools && nameCV && (\n        <div className=\"pt-4\">\n          {pools\n            .filter(p => isPoolOwned(p, nameCV))\n            .map(p => (\n              <div className=\"pt-4\">\n                <PoolInfo pool={p} />\n                <div className=\"input-group \">\n                  <button\n                    className=\"btn btn-outline-secondary\"\n                    type=\"button\"\n                    onClick={() => {\n                      console.log(p.data['pool-id']);\n                      navigate(`/me/edit/${p.data['pool-id'].value}`, {\n                        state: { pool: p },\n                      });\n                    }}\n                  >\n                    Edit Pool\n                  </button>\n                </div>\n              </div>\n            ))}\n        </div>\n      )}\n      {loading && <>Getting your pools' data and BNS username...</>}\n      <div className=\"input-group pt-4\">\n        <button\n          className=\"btn btn-outline-secondary\"\n          type=\"button\"\n          onClick={() => {\n            navigate(`/me/register`);\n          }}\n        >\n          Register New Pool\n        </button>\n      </div>\n      <div className=\"pt-4\">\n        If you want to revoke your membership of any pool, you can do it here.\n        <br/>\n        <PoXRevoke\n          userSession={userSession}\n          setStatus={setStatus}\n          setTxId={txId => setStatus(`Revoking with transcation ${txId}`)}\n        />\n      </div>\n      {status && (\n        <>\n          <br />\n          <div>{status}</div>\n        </>\n      )}\n    </div>\n  );\n}\n\nfunction isPoolOwned(pool, nameCV) {\n  console.log({ nameCV, pool });\n  return (\n    nameCV.data['namespace'].buffer.toString() ===\n      pool.data.name.data.namespace.buffer.toString() &&\n    nameCV.data['name'].buffer.toString() === pool.data.name.data.name.buffer.toString()\n  );\n}\n","import React from 'react';\nimport Profile from '../components/Profile';\nimport { useStxAddresses } from '../lib/hooks';\n\nexport default function MyProfile({ userSession }) {\n  console.log(userSession);\n  const { ownerStxAddress, appStxAddress } = useStxAddresses(userSession);\n\n  return (\n    <main className=\"panel-welcome mt-5 container\">\n      <div className=\"row\">\n        <div className=\"mx-auto col-sm-10 col-md-8 px-4\">\n          <Profile\n            stxAddresses={{\n              appStxAddress: appStxAddress,\n              ownerStxAddress: ownerStxAddress,\n            }}\n            userSession={userSession}\n          />\n        </div>\n      </div>\n    </main>\n  );\n}\n","import React, { useRef, useState, useEffect } from 'react';\n\nimport {\n  CONTRACT_ADDRESS,\n  GENESIS_CONTRACT_ADDRESS,\n  NETWORK,\n  POOL_REGISTRY_CONTRACT_NAME,\n} from '../lib/constants';\nimport { TxStatus } from '../lib/transactions';\nimport { fetchAccount, getUsername } from '../lib/account';\nimport { useConnect } from '@stacks/connect-react';\nimport {\n  bufferCVFromString,\n  callReadOnlyFunction,\n  ClarityType,\n  contractPrincipalCV,\n  cvToString,\n  FungibleConditionCode,\n  listCV,\n  makeStandardSTXPostCondition,\n  noneCV,\n  PostConditionMode,\n  someCV,\n  standardPrincipalCV,\n  stringAsciiCV,\n  uintCV,\n} from '@stacks/transactions';\nimport * as c32 from 'c32check';\nimport {\n  fetchPool,\n  findTraitIndex,\n  nameToUsernameCV,\n  registerFunctions,\n  updateFunctions,\n  verifyUrl,\n} from '../lib/pools';\nimport { poxAddrCVFromBitcoin, poxCVToBtcAddress } from '../lib/pools-utils';\nimport BN from 'bn.js';\n\nconst ERR_NAME = 'Name must contain 1 dot.';\nconst ERR_URL = 'Website url required!';\nconst ERR_REWARD_ADDRESS_1 = 'At least one reward address required.';\nconst ERR_INVALID_REWARD_ADDRESSES = 'Invalid Bitcoin address(es).';\nconst ERR_INVALID_CONTRACT_ID = 'Invalid contract id.';\nconst ERR_LOCKING_PERIOD_1 = 'At least one locking period required.';\nconst ERR_INVALID_LOCKING_PERIODS = 'Locking periods must be numbers between 1 and 12.';\nconst ERR_INVALID_STX_ADDRESS = 'Invalid STX address.';\nexport function PoolForm({ ownerStxAddress, register, poolId }) {\n  let title = 'Update pool';\n  let formButtonLabel;\n  if (register) {\n    title = 'Register a pool';\n    formButtonLabel = 'Register';\n  } else {\n    title = 'Update pool';\n    formButtonLabel = 'Update';\n  }\n  const { doContractCall } = useConnect();\n  const name = useRef();\n  const priceInfo = useRef();\n  const delegateeAddress = useRef();\n  const url = useRef();\n  const rewardBtcAddresses = useRef();\n  const contract = useRef();\n  const minimum = useRef();\n  const lockingPeriods = useRef();\n  const payout = useRef();\n  const dateOfPayout = useRef();\n  const fees = useRef();\n  const poolStatus = useRef();\n\n  const spinner = useRef();\n  const [status, setStatus] = useState();\n  const [txId, setTxId] = useState();\n  const [username, setUsername] = useState();\n  const [pool, setPool] = useState();\n  const [price, setPrice] = useState();\n\n  const btcAddressFromOwnerStxAddress = ownerStxAddress ? c32.c32ToB58(ownerStxAddress) : '';\n  useEffect(() => {\n    if (ownerStxAddress) {\n      fetchAccount(ownerStxAddress)\n        .catch(e => {\n          setStatus('Failed to access your account', e);\n          console.log(e);\n        })\n        .then(async acc => {\n          console.log({ acc });\n        });\n\n      getUsername(ownerStxAddress).then(resultCV => {\n        if (resultCV) {\n          setUsername(\n            `${resultCV.data['name'].buffer.toString()}.${resultCV.data[\n              'namespace'\n            ].buffer.toString()}`\n          );\n        } else {\n          setUsername(undefined);\n        }\n      });\n\n      if (poolId) {\n        fetchPool(poolId).then(pool => {\n          console.log({ pool });\n          setPool(pool);\n        });\n      }\n    }\n  }, [ownerStxAddress, poolId]);\n\n  const formAction = async () => {\n    let functionName;\n    let stxPostCondition;\n    let priceBN;\n\n    const errors = validateForm();\n    if (errors.length > 0) {\n      setStatus(\n        errors.map(e => (\n          <>\n            {e}\n            <br />\n          </>\n        ))\n      );\n      return;\n    } else {\n      setStatus(undefined);\n    }\n\n    const [poolCtrAddress, poolCtrName] = contract.current.value.trim().split('.');\n    const traitIndex = await findTraitIndex(poolCtrAddress, poolCtrName);\n    if (traitIndex < 0) {\n      setStatus('Invalid pool contract');\n      return;\n    }\n    if (register) {\n      functionName = registerFunctions[traitIndex];\n      if (username) {\n        priceBN = new BN(0);\n      } else {\n        if (!price) {\n          await checkPrice();\n        }\n        priceBN = new BN(price * 1000000);\n      }\n    } else {\n      functionName = updateFunctions[traitIndex];\n      priceBN = new BN(0);\n    }\n\n    if (username && !(await checkUrl(url.current.value.trim(), username))) {\n      setStatus(`Website manifest.json must contain entry \"author\":\"${username}\"`);\n      return;\n    }\n    stxPostCondition = makeStandardSTXPostCondition(\n      ownerStxAddress,\n      FungibleConditionCode.Equal,\n      priceBN\n    );\n    spinner.current.classList.remove('d-none');\n\n    const usernameCV = nameToUsernameCV(name.current.value.trim());\n    if (!usernameCV) {\n      setStatus(ERR_NAME);\n      return;\n    }\n    const delegateeParts = delegateeAddress.current.value.trim().split('.');\n\n    const delegateeCV =\n      delegateeParts.length === 1\n        ? standardPrincipalCV(delegateeParts[0])\n        : contractPrincipalCV(delegateeParts[0], delegateeParts[1]);\n    const poxAddressesCV = listCV(\n      rewardBtcAddresses.current.value.split(',').map(addr => poxAddrCVFromBitcoin(addr.trim()))\n    );\n    const urlCV = stringAsciiCV(url.current.value.trim());\n    let minimumUstxCV;\n    if (minimum.current.value) {\n      minimumUstxCV = someCV(uintCV(parseInt(minimum.current.value) * 1000000));\n    } else {\n      minimumUstxCV = noneCV();\n    }\n\n    if (!lockingPeriods.current.value.trim()) {\n      setStatus('Locking Period required.');\n      return;\n    }\n    const lockingPeriodsCV = lockingPeriods.current.value.trim()\n      ? listCV(lockingPeriods.current.value.split(',').map(lp => uintCV(parseInt(lp.trim()))))\n      : listCV([]);\n    const payoutCV = stringAsciiCV(payout.current.value.trim());\n    const dateOfPayoutCV = stringAsciiCV(dateOfPayout.current.value.trim());\n    const feesCV = stringAsciiCV(fees.current.value.trim());\n    const contractCV = contractPrincipalCV(poolCtrAddress, poolCtrName);\n    const statusCV = uintCV(poolStatus.current.value);\n    console.log({ functionName, lockingPeriodCV: lockingPeriodsCV, poxAddressCV: poxAddressesCV });\n    try {\n      setStatus(`Sending transaction`);\n\n      await doContractCall({\n        contractAddress: CONTRACT_ADDRESS,\n        contractName: POOL_REGISTRY_CONTRACT_NAME,\n        functionName,\n        functionArgs: [\n          usernameCV,\n          delegateeCV,\n          poxAddressesCV,\n          urlCV,\n          contractCV,\n          minimumUstxCV,\n          lockingPeriodsCV,\n          payoutCV,\n          dateOfPayoutCV,\n          feesCV,\n          statusCV,\n        ],\n        postConditionMode: PostConditionMode.Deny,\n        postConditions: [stxPostCondition],\n        network: NETWORK,\n        finished: data => {\n          console.log(data);\n          setStatus(undefined);\n          setTxId(data.txId);\n          spinner.current.classList.add('d-none');\n        },\n      });\n    } catch (e) {\n      console.log(e);\n      setStatus(e.toString());\n      spinner.current.classList.add('d-none');\n    }\n  };\n\n  const checkPrice = async () => {\n    const requestedName = name.current.value.trim();\n    const parts = requestedName.split('.');\n    if (parts.length === 2) {\n      const priceResult = await callReadOnlyFunction({\n        contractAddress: GENESIS_CONTRACT_ADDRESS,\n        contractName: 'bns',\n        functionName: 'get-name-price',\n        functionArgs: [bufferCVFromString(parts[1]), bufferCVFromString(parts[0])],\n        senderAddress: ownerStxAddress,\n      });\n      console.log({ priceResult });\n      if (priceResult.type === ClarityType.ResponseOk) {\n        const priceUstx = priceResult.value.value / 1000000n;\n        setPrice(priceUstx);\n        priceInfo.current.innerHTML = `Price: ${priceUstx.toFixed(6)} STX`;\n      } else {\n        priceInfo.current.innerHTML = 'No price info found.';\n      }\n    } else {\n      priceInfo.current.innerHTML = ERR_NAME;\n    }\n  };\n\n  const checkUrl = async (url, username) => {\n    return verifyUrl(url, username);\n  };\n\n  const validateForm = () => {\n    const errors = [];\n    // username\n    if (name.current.value.trim().split('.').length !== 2) {\n      name.current.setCustomValidity(ERR_NAME);\n      errors.push(ERR_NAME);\n    } else {\n      name.current.setCustomValidity('');\n    }\n\n    // website\n    if (!url.current.value.trim()) {\n      url.current.setCustomValidity(ERR_URL);\n      errors.push(ERR_URL);\n    } else {\n      url.current.setCustomValidity('');\n    }\n\n    // delegatee address\n    try {\n      const [addr] = delegateeAddress.current.value.trim().split('.');\n      c32.c32addressDecode(addr);\n      delegateeAddress.current.setCustomValidity('');\n    } catch (e) {\n      console.log(e)\n      delegateeAddress.current.setCustomValidity(ERR_INVALID_STX_ADDRESS + ' ' + e.toString());\n      errors.push(ERR_INVALID_STX_ADDRESS);\n    }\n\n    // reward addresses\n    const addrList = rewardBtcAddresses.current.value.split(',');\n    if (addrList.length === 0) {\n      rewardBtcAddresses.setCustomValidity(ERR_REWARD_ADDRESS_1);\n      errors.push(ERR_REWARD_ADDRESS_1);\n    } else if (\n      !addrList.reduce((result, addr) => {\n        try {\n          c32.b58ToC32(addr.trim());\n          return result;\n        } catch (e) {\n          console.log(addr, e);\n          return false;\n        }\n      }, true)\n    ) {\n      rewardBtcAddresses.current.setCustomValidity(ERR_INVALID_REWARD_ADDRESSES);\n      errors.push(ERR_INVALID_REWARD_ADDRESSES);\n    } else {\n      rewardBtcAddresses.current.setCustomValidity('');\n    }\n\n    // contract\n    const [ctrAddr, ctrName] = contract.current.value.trim().split('.');\n    if (!ctrAddr || !ctrName) {\n      contract.current.setCustomValidity(ERR_INVALID_CONTRACT_ID);\n      errors.push(ERR_INVALID_CONTRACT_ID);\n    } else {\n      contract.current.setCustomValidity('');\n    }\n\n    // locking period\n    const lockingPeriodList = lockingPeriods.current.value.split(',');\n    if (lockingPeriodList.length === 0) {\n      lockingPeriods.current.setCustomValidity(ERR_LOCKING_PERIOD_1);\n      errors.push(ERR_LOCKING_PERIOD_1);\n    } else if (\n      !lockingPeriodList.reduce((result, lp) => {\n        const period = parseInt(lp.trim());\n        return result && !isNaN(period) && period >= 1 && period <= 12;\n      }, true)\n    ) {\n      lockingPeriods.current.setCustomValidity(ERR_INVALID_LOCKING_PERIODS);\n      errors.push(ERR_INVALID_LOCKING_PERIODS);\n    } else {\n      lockingPeriods.current.setCustomValidity('');\n    }\n    return errors;\n  };\n\n  return (\n    <div>\n      <h5>{title}</h5>\n      {(register || (pool && username)) && (\n        <div className=\"NoteField\">\n          <b>Pool admin's user name</b>\n          {register && !username && (\n            <>\n              <br />A BNS name that is used to protect pool's data. Only the owner of this name can\n              update the data. The name must contain exactly 1 dot. e.g. alice.id. Subdomain names\n              are not supported by the UI.\n              <br />\n              The name is registered and paid for during the `register` function call if not yet\n              owned by the caller. (Costs around 0.1 STX for friedgerpool.id)\n              <br />\n              After successful registration of the name, add the name to your website's\n              manifest.json file as \"author\".\n            </>\n          )}\n          <input\n            type=\"text\"\n            ref={name}\n            className=\"form-control\"\n            defaultValue={username}\n            readOnly={!register || username}\n            placeholder=\"Name, e.g. alice.id\"\n            onKeyUp={e => {\n              if (e.key === 'Enter') delegateeAddress.current.focus();\n            }}\n            onBlur={e => {\n              validateForm();\n            }}\n          />\n          {register && (\n            <div className=\"input-group-append\" style={{ alignItems: 'center' }}>\n              <button className=\"btn btn-outline-secondary\" type=\"button\" onClick={checkPrice}>\n                <div\n                  ref={spinner}\n                  role=\"status\"\n                  className=\"d-none spinner-border spinner-border-sm text-info align-text-top mr-2\"\n                />\n                Check price\n              </button>\n              <div className=\"pl-4\" ref={priceInfo}></div>\n            </div>\n          )}\n          <br />\n          <b>Delegatee address</b>\n          <br />\n          Pool's Stacks address for delegation\n          <input\n            type=\"text\"\n            ref={delegateeAddress}\n            className=\"form-control\"\n            defaultValue={register ? ownerStxAddress : cvToString(pool.data['delegatee'])}\n            placeholder=\"Stacks address\"\n            onKeyUp={e => {\n              if (e.key === 'Enter') url.current.focus();\n            }}\n            required\n            onBlur={e => {\n              validateForm();\n            }}\n          />\n          <br />\n          <b>Pool's Website</b>\n          <input\n            type=\"text\"\n            ref={url}\n            className=\"form-control\"\n            defaultValue={register ? '' : pool.data['url'].data}\n            placeholder=\"Url\"\n            required\n            onKeyUp={e => {\n              if (e.key === 'Enter') rewardBtcAddresses.current.focus();\n            }}\n            onBlur={e => {\n              validateForm();\n            }}\n          />\n          <br />\n          <b>Reward BTC addresses</b>\n          <br />\n          One or more BTC addresses, comma separated list\n          <input\n            type=\"text\"\n            ref={rewardBtcAddresses}\n            className=\"form-control\"\n            defaultValue={\n              register\n                ? btcAddressFromOwnerStxAddress\n                : pool.data['pox-address'].list.map(cv => poxCVToBtcAddress(cv)).join(',')\n            }\n            placeholder=\"Pool's reward BTC address\"\n            onKeyUp={e => {\n              if (e.key === 'Enter') contract.current.focus();\n            }}\n            onBlur={e => {\n              validateForm();\n            }}\n          />\n          <br />\n          <b>Contract ID</b>\n          <br />\n          This could be the genesis pox contract or a custom pool contract.\n          <input\n            type=\"text\"\n            ref={contract}\n            className=\"form-control\"\n            defaultValue={\n              register\n                ? `${GENESIS_CONTRACT_ADDRESS}.pox`\n                : pool.data['contract'].type === ClarityType.OptionalSome\n                ? cvToString(pool.data['contract'].value)\n                : cvToString(pool.data['contract-ext'].value)\n            }\n            placeholder=\"Pool's Contract ID\"\n            onKeyUp={e => {\n              if (e.key === 'Enter') minimum.current.focus();\n            }}\n            onBlur={e => {\n              validateForm();\n            }}\n          />\n          <br />\n          <b>Minimum STX</b> required to join\n          <input\n            type=\"number\"\n            ref={minimum}\n            step=\"any\"\n            min=\"0\"\n            className=\"form-control\"\n            defaultValue={\n              register\n                ? undefined\n                : pool.data['minimum-ustx'].type === ClarityType.OptionalSome\n                ? pool.data['minimum-ustx'].value.value / 1000000n\n                : undefined\n            }\n            placeholder=\"Minimum STX required for joining\"\n            onKeyUp={e => {\n              if (e.key === 'Enter') lockingPeriods.current.focus();\n            }}\n            onBlur={e => {\n              validateForm();\n            }}\n          />\n          <br />\n          <b>Locking period</b>\n          <br />\n          Number of locking cycles (comma separated list of cycles; between 1 and 12). <br />\n          <del>Leave empty if variable.</del> At least one entry required due to{' '}\n          <a href=\"https://github.com/blockstack/stacks-wallet-web/issues/1111\">#1111</a>.\n          <input\n            type=\"text\"\n            ref={lockingPeriods}\n            className=\"form-control\"\n            placeholder=\"e.g. 1, 12\"\n            defaultValue={\n              register\n                ? undefined\n                : pool.data['locking-period'].list.map(cv => cv.value.toString(10)).join(',')\n            }\n            onKeyUp={e => {\n              if (e.key === 'Enter') payout.current.focus();\n            }}\n            onBlur={e => {\n              validateForm();\n            }}\n          />\n          <br />\n          <b>Pool payouts</b> <br />\n          Currency of pool payouts\n          <select\n            type=\"text\"\n            ref={payout}\n            className=\"form-control\"\n            defaultValue={register ? 'BTC' : pool.data['payout'].data}\n            placeholder=\"e.g. BTC, STX, WMNO\"\n            onKeyUp={e => {\n              if (e.key === 'Enter') dateOfPayout.current.focus();\n            }}\n            onBlur={e => {\n              validateForm();\n            }}\n          >\n            <option value=\"BTC\">BTC</option>\n            <option value=\"STX\">STX</option>\n          </select>\n          <br />\n          <b>Date of Payout</b>\n          <br />\n          When the Pool payouts rewards (optional, max 80 char.)\n          <input\n            type=\"text\"\n            ref={dateOfPayout}\n            className=\"form-control\"\n            defaultValue={register ? '' : pool.data['date-of-payout'].data}\n            placeholder=\"e.g. end of cycle, instant\"\n            maxLength=\"80\"\n            onKeyUp={e => {\n              if (e.key === 'Enter') fees.current.focus();\n            }}\n            onBlur={e => {\n              validateForm();\n            }}\n          />\n          <br />\n          <b>Fees</b>\n          <br />\n          What are the fees (optional, max 80 char.)\n          <input\n            type=\"text\"\n            ref={fees}\n            className=\"form-control\"\n            defaultValue={register ? '' : pool.data['fees'].data}\n            placeholder=\"e.g. 10%, 5 STX\"\n            maxLength=\"80\"\n            onKeyUp={e => {\n              if (e.key === 'Enter') poolStatus.current.focus();\n            }}\n            onBlur={e => {\n              validateForm();\n            }}\n          />\n          <br />\n          <b>Status</b>\n          <br />\n          One of \"In development\", \"In production\", \"Open to join\", \"Closed for next cycle\",\n          \"Retired\"\n          <select\n            ref={poolStatus}\n            className=\"form-control\"\n            defaultValue={register ? '0' : pool.data['status'].value}\n            onKeyUp={e => {\n              if (e.key === 'Enter') formAction();\n            }}\n            onBlur={e => {\n              validateForm();\n            }}\n          >\n            <option value=\"0\">In development (0)</option>\n            <option value=\"1\">In production (1)</option>\n            <option value=\"11\">Open to join for next cycle (11)</option>\n            <option value=\"21\">Closed for next cycle (21)</option>\n            <option value=\"99\">Retired (99)</option>\n          </select>\n          <br />\n          <div className=\"input-group-append\">\n            <button className=\"btn btn-outline-secondary\" type=\"button\" onClick={formAction}>\n              <div\n                ref={spinner}\n                role=\"status\"\n                className=\"d-none spinner-border spinner-border-sm text-info align-text-top mr-2\"\n              />\n              {formButtonLabel}\n            </button>\n          </div>\n        </div>\n      )}\n      {!register && !pool && <>Loading pool data...</>}\n      <div>\n        <TxStatus txId={txId} resultPrefix=\"Order placed in block \" />\n      </div>\n      {status && (\n        <>\n          <div>{status}</div>\n        </>\n      )}\n    </div>\n  );\n}\n","import React from 'react';\nimport { PoolForm } from '../components/PoolForm';\nimport { useStxAddresses } from '../lib/hooks';\n\nexport default function MyProfileRegister({ userSession }) {\n  console.log(userSession);\n  const { ownerStxAddress } = useStxAddresses(userSession);\n\n  return (\n    <main className=\"panel-welcome mt-5 container\">\n      <div className=\"row\">\n        <div className=\"mx-auto col-sm-10 col-md-8 px-4\">\n          <PoolForm register ownerStxAddress={ownerStxAddress} />\n        </div>\n      </div>\n    </main>\n  );\n}\n","import React from 'react';\nimport { useStxAddresses } from '../lib/hooks';\nimport { PoolForm } from '../components/PoolForm';\n\nexport default function MyProfileEdit({ userSession, poolId }) {\n  console.log({ userSession, poolId });\n  const { ownerStxAddress } = useStxAddresses(userSession);\n\n  return (\n    <main className=\"panel-welcome mt-5 container\">\n      <div className=\"row\">\n        <div className=\"mx-auto col-sm-10 col-md-8 px-4\">\n          <PoolForm ownerStxAddress={ownerStxAddress} poolId={poolId} />\n        </div>\n      </div>\n    </main>\n  );\n}\n","import React from 'react';\nimport { useStxAddresses } from '../lib/hooks';\nimport { PoolJoinSimple } from '../components/PoolJoinSimple';\n\nexport default function PoolDetailsSimple({ delegatee, location, userSession }) {\n  const { ownerStxAddress } = useStxAddresses(userSession);\n\n  return (\n    <main className=\"panel-welcome mt-5 container\">\n      <div className=\"lead row mt-5\">\n        <div className=\"col-xs-10 col-md-8 mx-auto px-4\">\n          <h1 className=\"card-title\">Join Pool</h1>\n        </div>\n\n        <div className=\"col-xs-10 col-md-8 mx-auto mb-4 px-4\">\n          <PoolJoinSimple\n            delegatee={delegatee}\n            ownerStxAddress={ownerStxAddress}\n            userSession={userSession}\n          />\n        </div>\n\n        <div className=\"card col-md-8 mx-auto mt-5 mb-5 text-center px-0 border-warning\">\n          <div className=\"card-header\">\n            <h5 className=\"card-title\">Instructions</h5>\n          </div>\n          <ul className=\"list-group list-group-flush\">\n            <li className=\"list-group-item\">\n              If you have not yet locked any Stacks tokens and if you haven't joined a pool yet,\n              join now.\n            </li>\n            <li className=\"list-group-item\">\n              Enter the amount, duration, and reward address to define how you would like to stack\n              and click delegate.\n            </li>\n            <li className=\"list-group-item\">\n              Wait for the pool admin to do the necessary and collect your rewards.\n            </li>\n          </ul>\n        </div>\n      </div>\n    </main>\n  );\n}\n","import { StacksMainnet } from '@stacks/network';\nimport { broadcastTransaction, makeSTXTokenTransfer } from '@stacks/transactions';\nimport React, { useState } from 'react';\nimport Profile from '../components/Profile';\nimport { fetchAccount } from '../lib/account';\nimport { useStxAddresses } from '../lib/hooks';\nimport BN from 'bn.js';\nimport { StxProfile } from '../components/StxProfile';\n\nexport default function MyProfile({ userSession }) {\n  const { ownerStxAddress, appStxAddress, appPrivateKey } = useStxAddresses(userSession);\n  const [status, setStatus] = useState();\n  const [preview, setPreview] = useState(true);\n\n  const transferToOwnerAddress = async () => {\n    setStatus('Checking balances..');\n    const stxBalance = await fetchAccount(appStxAddress);\n    if (stxBalance.balance === '0') {\n      setStatus('Amount is 0');\n      return;\n    }\n    const network = new StacksMainnet();\n    const fee = 100000;\n    const tx = await makeSTXTokenTransfer({\n      amount: new BN(stxBalance.balance - fee),\n      recipient: ownerStxAddress,\n      network,\n      fee: new BN(fee),\n      senderKey: appPrivateKey,\n    });\n    if (preview) {\n      setStatus(\n        `Transfer ${stxBalance.balance} from ${appStxAddress} to ${ownerStxAddress}. Using ${\n          fee / 1000000.0\n        } STX as transaction fees.`\n      );\n      setPreview(false);\n    } else {\n      const txId = await broadcastTransaction(tx, network);\n      setStatus('Transfer has been submitted ' + txId);\n    }\n  };\n\n  return (\n    <main className=\"panel-welcome mt-5 container\">\n      <div className=\"row\">\n        <div className=\"mx-auto col-sm-10 col-md-8 px-4\">\n          <Profile\n            stxAddresses={{\n              appStxAddress: appStxAddress,\n              ownerStxAddress: ownerStxAddress,\n            }}\n            userSession={userSession}\n          />\n          <div className=\"pt-4\">\n            Your STX hold address for this pool app:\n            <br />\n            <StxProfile stxAddress={appStxAddress} showAddress updateStatus={setStatus}></StxProfile>\n          </div>\n          <hr />\n          <div>Transfer from Hodl account address to Stx account address</div>\n          <button className=\"btn btn-outline-secondary mt-1\" onClick={transferToOwnerAddress}>\n            {preview ? 'Preview' : 'Transfer'}\n          </button>\n          <div>{status}</div>\n        </div>\n      </div>\n    </main>\n  );\n}\n","import React, { useEffect } from 'react';\nimport Landing from './pages/Landing';\nimport Overview from './pages/Overview';\nimport { Connect } from '@stacks/connect-react';\nimport { Link, Router } from '@reach/router';\nimport { NETWORK } from './lib/constants';\nimport Auth from './components/Auth';\nimport { userDataState, userSessionState, useConnect } from './lib/auth';\nimport { useAtom } from 'jotai';\nimport PoolRegistry from './pages/PoolRegistry';\nimport PoolDetails from './pages/PoolDetails';\nimport MyProfile from './pages/MyProfile';\nimport MyProfileRegister from './pages/MyProfileRegister';\nimport MyProfileEdit from './pages/MyProfileEdit';\nimport PoolDetailsSimple from './pages/PoolDetailsSimple';\nimport MyProfileHodl from \"./pages/MyProfileHodl\"\n\nexport default function App(props) {\n  const { authOptions } = useConnect();\n  const [userSession] = useAtom(userSessionState);\n  const [, setUserData] = useAtom(userDataState);\n  useEffect(() => {\n    if (userSession?.isUserSignedIn()) {\n      setUserData(userSession.loadUserData());\n    } else if (userSession.isSignInPending()) {\n      userSession.handlePendingSignIn();\n    }\n  }, [userSession, setUserData]);\n\n  return (\n    <Connect authOptions={authOptions}>\n      <nav className=\"navbar sticky-top navbar-dark bg-dark text-light\">\n        <a className=\"navbar-brand\" href=\"/\">\n          <img src=\"/mainnet.png\" alt=\"Logo\" />\n        </a>\n        <Auth className=\"ml-auto\" userSession={userSession} />\n      </nav>\n\n      <Content userSession={userSession} />\n    </Connect>\n  );\n}\n\nconst NavLink = props => {\n  return (\n    <Link\n      {...props}\n      getProps={({ isCurrent }) => {\n        // the object returned here is passed to the\n        // anchor element's props\n        if (isCurrent) {\n          return {\n            className: 'nav-item nav-link px-4 active',\n          };\n        } else {\n          return { className: 'nav-item nav-link px-4' };\n        }\n      }}\n    />\n  );\n};\n\nfunction AppBody(props) {\n  return (\n    <div>\n      <nav className=\"navbar navbar-expand-md nav-pills nav-justified mx-auto\">\n        <NavLink to=\"/\">Overview</NavLink>\n        <NavLink to=\"/pools\">Pools</NavLink>\n        <NavLink to=\"/me\">Profile</NavLink>\n      </nav>\n      {props.children}\n      <div>{NETWORK.coreApiUrl}</div>\n    </div>\n  );\n}\nfunction Content({ userSession }) {\n  const authenticated = userSession && userSession.isUserSignedIn();\n  const decentralizedID =\n    userSession && userSession.isUserSignedIn() && userSession.loadUserData().decentralizedID;\n  return (\n    <>\n      {!authenticated && <Landing />}\n      {decentralizedID && (\n        <>\n          <Router>\n            <AppBody path=\"/\">\n              <Overview path=\"/\" decentralizedID={decentralizedID} />\n\n              <PoolRegistry\n                path=\"/pools\"\n                decentralizedID={decentralizedID}\n                userSession={userSession}\n              />\n              <PoolDetails\n                path=\"/pools/:poolId\"\n                decentralizedID={decentralizedID}\n                userSession={userSession}\n              />\n              <MyProfile path=\"/me\" decentralizedID={decentralizedID} userSession={userSession} />\n              <MyProfileRegister\n                path=\"/me/register\"\n                decentralizedID={decentralizedID}\n                userSession={userSession}\n              />\n              <MyProfileEdit\n                path=\"/me/edit/:poolId\"\n                decentralizedID={decentralizedID}\n                userSession={userSession}\n              />\n              <PoolDetailsSimple\n                path=\"/join/:delegatee\"\n                decentralizedID={decentralizedID}\n                userSession={userSession}\n              />\n              <MyProfileHodl path=\"/hodl\"\n              decentralizedID={decentralizedID}\n              userSession={userSession}/>\n            </AppBody>\n          </Router>\n        </>\n      )}\n    </>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App.js';\n// Require Sass file so webpack can build it\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './styles/style.css';\n\nReactDOM.render(<App />, document.getElementById('App'));\n","import { ClarityType, cvToString } from '@stacks/transactions';\nimport { getPoolContractId, usernameCVToName } from '../lib/pools';\nimport { poxCVToBtcAddress } from '../lib/pools-utils';\n\nfunction normalizedUrl(u) {\n  if (u.startsWith('https://') || u.startsWith('http://')) {\n    return u;\n  } else {\n    return `https://${u}`;\n  }\n}\nexport default function PoolInfo({ pool }) {\n  const contractId = getPoolContractId(pool);\n\n  return (\n    <>\n      <h5>\n        {pool.data.url.data ? (\n          <a href={normalizedUrl(pool.data.url.data)}>{usernameCVToName(pool.data.name)}</a>\n        ) : (\n          <>{usernameCVToName(pool.data.name)}</>\n        )}\n        {pool.data.verified && pool.data.verified.type === ClarityType.BoolTrue && (\n          <>\n            {' '}\n            <a href={`${pool.data.url.data}/manifest.json`}>\n              <img src=\"/verified.svg\" alt=\"verified\" width=\"16\" />\n            </a>\n          </>\n        )}\n      </h5>\n      <p>\n        {cvToString(pool.data.delegatee)}\n        <br />\n        {pool.data['locking-period'].type === ClarityType.List\n          ? `Locking for ${pool.data['locking-period'].list\n              .map(lp => lp.value.toString(10))\n              .join(', ')} cycles.`\n          : 'Variable locking period'}\n        <br />\n        {pool.data['minimum-ustx'].type === ClarityType.OptionalSome\n          ? `Minimum amount required to join: ${\n              pool.data['minimum-ustx'].value.value / 1000000n\n            } STX`\n          : 'No minimum STX required.'}\n        <br />\n        Payout in {pool.data['payout'].data}.\n        <br />\n        {pool.data['date-of-payout'].data ? (\n          <>When payout? {pool.data['date-of-payout'].data}.</>\n        ) : (\n          <>No information about payout date available.</>\n        )}\n        <br />\n        {pool.data['fees'].data\n          ? `Fees: ${pool.data['fees'].data}`\n          : 'No information about fees available.'}\n        <br />\n        Reward addresses:\n        <br />\n        {pool.data['pox-address'].list.map(address => {\n          return (\n            <>\n              {poxCVToBtcAddress(address)}\n              <br />\n            </>\n          );\n        })}\n        Using contract:\n        <br />\n        {contractId}\n        <br />\n      </p>\n    </>\n  );\n}\n","import { serializeCV, hexToCV as stacksHexToCV } from '@stacks/transactions';\nimport { connectWebSocketClient } from '@stacks/blockchain-api-client';\nimport React, { useState, useEffect, useRef } from 'react';\nimport { STACKS_API_WS_URL, transactionsApi } from './constants';\n\nexport function resultToStatus(result) {\n  if (result && !result.error && result.startsWith('\"') && result.length === 66) {\n    const txId = result.substr(1, 64);\n    return txIdToStatus(txId);\n  } else if (result && result.error) {\n    return JSON.stringify(result);\n  } else {\n    return result.toString();\n  }\n}\n\nexport function txIdToStatus(txId) {\n  return (\n    <>\n      Check transaction status: <a href={txUrl(txId)}>{txId}</a>\n    </>\n  );\n}\n\nexport function cvToHex(value) {\n  return `0x${serializeCV(value).toString('hex')}`;\n}\n\nexport function hexToCV(hexString) {\n  return stacksHexToCV(hexString);\n}\n\nexport function txUrl(txId) {\n  return `https://explorer.stacks.co/txid/0x${txId}?chain=mainnet`;\n}\n\nexport function TxStatus({ txId, resultPrefix }) {\n  const [processingResult, setProcessingResult] = useState({ loading: false });\n  const spinner = useRef();\n\n  useEffect(() => {\n    if (!txId) {\n      return;\n    }\n    console.log(txId);\n    spinner.current.classList.remove('d-none');\n    setProcessingResult({ loading: true });\n\n    let sub;\n    const subscribe = async (txId, update) => {\n      try {\n        const client = await connectWebSocketClient(STACKS_API_WS_URL);\n        sub = await client.subscribeTxUpdates(txId, update);\n        console.log({ client, sub });\n      } catch (e) {\n        console.log(e);\n      }\n    };\n\n    subscribe(txId, async event => {\n      console.log(event);\n      let result;\n      if (event.tx_status === 'pending') {\n        return;\n      } else if (event.tx_status === 'success') {\n        const tx = await transactionsApi.getTransactionById({ txId });\n        console.log(tx);\n        result = tx.tx_result;\n      } else if (event.tx_status.startsWith('abort')) {\n        result = undefined;\n      }\n      spinner.current.classList.add('d-none');\n      setProcessingResult({ loading: false, result });\n      await sub.unsubscribe();\n    });\n  }, [txId]);\n\n  if (!txId) {\n    return null;\n  }\n\n  const normalizedTxId = txId.startsWith('0x') ? txId : `0x${txId}`;\n  return (\n    <>\n      {processingResult.loading && (\n        <>\n          Checking transaction status:{' '}\n          <a href={`https://explorer.stacks.co/txid/${normalizedTxId}?chain=mainnet`}>\n            {normalizedTxId}\n          </a>\n        </>\n      )}\n      {!processingResult.loading && processingResult.result && (\n        <>\n          {resultPrefix}\n          {processingResult.result.repr}\n        </>\n      )}{' '}\n      <div\n        ref={spinner}\n        role=\"status\"\n        className=\"d-none spinner-border spinner-border-sm text-info align-text-top mr-2\"\n      />\n    </>\n  );\n}\n"],"sourceRoot":""}